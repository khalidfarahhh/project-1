{
  
    
        "post0": {
            "title": "list and dictionaries",
            "content": "InfoDb = [] # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Khalid&quot;, &quot;LastName&quot;: &quot;Farah&quot;, &quot;DOB&quot;: &quot;July 7th 2006&quot;, &quot;Residence&quot;: &quot;San Diego, California&quot;, &quot;Email&quot;: &quot;Khalidfarah211@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;None yet their on the way&quot;], &quot;Pets&quot;: &quot;No pets thankfully&quot;, &quot;Siblings&quot;: &quot;One brother with an age of 21 and a sister who is 19 years old&quot; }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Pets owned:&quot;, d_rec [&quot;Pets&quot;]) print(&quot; t&quot;, &quot;Siblings:&quot;, d_rec [&quot;Siblings&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output Khalid Farah Residence: San Diego, California Birth Day: July 7th 2006 Pets owned: No pets thankfully Siblings: One brother with an age of 21 and a sister who is 19 years old Cars: None yet their on the way .",
            "url": "https://khalidfarahhh.github.io/project-1/collegeboard/2022/09/06/list-and-dictionaries.html",
            "relUrl": "/collegeboard/2022/09/06/list-and-dictionaries.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "First Jupyter Notebook",
            "content": "print(&quot;hello class&quot;) . hello class .",
            "url": "https://khalidfarahhh.github.io/project-1/jupyter/2022/09/05/_08_21_1st_Notebook-(1).html",
            "relUrl": "/jupyter/2022/09/05/_08_21_1st_Notebook-(1).html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Bash Tool Check",
            "content": "echo &quot;Using conditional statement to create a project directory and project&quot; # Variable section export project_dir=$HOME/vscode # change vscode to different name to test git clone export project=$project_dir/APCSP # change APCSP to name of project from git clone export project_repo=&quot;https://github.com/nighthawkcoders/APCSP.git&quot; # change to project of choice cd ~ # start in home directory # Conditional block to make a project directory if [ ! -d $project_dir ] then echo &quot;Directory $project_dir does not exists... makinng directory $project_dir&quot; mkdir -p $project_dir fi echo &quot;Directory $project_dir exists.&quot; # Conditional block to git clone a project from project_repo if [ ! -d $project ] then echo &quot;Directory $project does not exists... cloning $project_repo&quot; cd $project_dir git clone $project_repo cd ~ fi echo &quot;Directory $project exists.&quot; . Using conditional statement to create a project directory and project Directory /home/khalidfarah/vscode exists. Directory /home/khalidfarah/vscode/APCSP exists. .",
            "url": "https://khalidfarahhh.github.io/project-1/collegeboard/2022/08/28/bash.html",
            "relUrl": "/collegeboard/2022/08/28/bash.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Football Quiz",
            "content": "def question_and_answer(prompt): print(&quot;Question: &quot; + prompt) msg = input(11) print(&quot;Answer: &quot; + msg) question_and_answer(&quot;How many players are their on defense?&quot;) . Question: How many players are their on defense? Answer: 11 .",
            "url": "https://khalidfarahhh.github.io/project-1/collegeboard/2022/08/26/notebookquiz.html",
            "relUrl": "/collegeboard/2022/08/26/notebookquiz.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Markdown",
            "content": "Di— . toc: false Layout: post description: The first post I made with a Markdown Categories: [markdown] Title: First Markdown — . The life of khalid . football season . About football stats . list Print (&quot;hello world&quot;) . llinger . The Last Markdown Editor, Ever . | . [![N | Solid](x://cldup.com/dTxpPi9lDf.thumb.png)](https://nodesource.com/products/nsolid) | . . Dillinger is a cloud-enabled, mobile-ready, offline-storage compatible, AngularJS-powered HTML5 Markdown editor. . Type some Markdown on the left | See HTML in the right | ✨Magic ✨ | . Features . Import a HTML file and watch it magically convert to Markdown | Drag and drop images (requires your Dropbox account be linked) | Import and save files from GitHub, Dropbox, Google Drive and One Drive | Drag and drop markdown and HTML files into Dillinger | Export documents as Markdown, HTML and PDF | . Markdown is a lightweight markup language based on the formatting conventions that people naturally use in email. As John Gruber writes on the Markdown site . The overriding design goal for Markdown’s formatting syntax is to make it as readable as possible. The idea is that a Markdown-formatted document should be publishable as-is, as plain text, without looking like it’s been marked up with tags or formatting instructions. . This text you see here is *actually- written in Markdown! To get a feel for Markdown’s syntax, type some text into the left window and watch the results in the right. . Tech . Dillinger uses a number of open source projects to work properly: . AngularJS - HTML enhanced for web apps! | Ace Editor - awesome web-based text editor | markdown-it - Markdown parser done right. Fast and easy to extend. | Twitter Bootstrap - great UI boilerplate for modern web apps | node.js - evented I/O for the backend | Express - fast node.js network app framework @tjholowaychuk | Gulp - the streaming build system | Breakdance - HTML to Markdown converter | jQuery - duh | . And of course Dillinger itself is open source with a public repository on GitHub. . Installation . Dillinger requires Node.js v10+ to run. . Install the dependencies and devDependencies and start the server. . cd dillinger npm i node app . For production environments… . npm install --production NODE_ENV=production node app . Plugins . Dillinger is currently extended with the following plugins. Instructions on how to use them in your own application are linked below. . Plugin README . Dropbox | plugins/dropbox/README.md | . GitHub | plugins/github/README.md | . Google Drive | plugins/googledrive/README.md | . OneDrive | plugins/onedrive/README.md | . Medium | plugins/medium/README.md | . Google Analytics | plugins/googleanalytics/README.md | . Development . Want to contribute? Great! . Dillinger uses Gulp + Webpack for fast developing. Make a change in your file and instantaneously see your updates! . Open your favorite Terminal and run these commands. . First Tab: . node app . Second Tab: . gulp watch . (optional) Third: . karma test . Building for source . For production release: . gulp build --prod . Generating pre-built zip archives for distribution: . gulp build dist --prod . Docker . Dillinger is very easy to install and deploy in a Docker container. . By default, the Docker will expose port 8080, so change this within the Dockerfile if necessary. When ready, simply use the Dockerfile to build the image. . cd dillinger docker build -t &lt;youruser&gt;/dillinger:${package.json.version} . . This will create the dillinger image and pull in the necessary dependencies. Be sure to swap out ${package.json.version} with the actual version of Dillinger. . Once done, run the Docker image and map the port to whatever you wish on your host. In this example, we simply map port 8000 of the host to port 8080 of the Docker (or whatever port was exposed in the Dockerfile): . docker run -d -p 8000:8080 --restart=always --cap-add=SYS_ADMIN --name=dillinger &lt;youruser&gt;/dillinger:${package.json.version} . Note: --capt-add=SYS-ADMIN is required for PDF rendering. . Verify the deployment by navigating to your server address in your preferred browser. . 127.0.0.1:8000 . License . MIT . Free Software, Hell Yeah! .",
            "url": "https://khalidfarahhh.github.io/project-1/2022/08/21/Markdown.html",
            "relUrl": "/2022/08/21/Markdown.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://khalidfarahhh.github.io/project-1/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  
      ,"page0": {
          "title": "",
          "content": "Week Projects . 0 | My First Jupyter Notebook,—&gt; My First Markdown. | . 1 | Football quiz,—&gt; Bash tools check. | . 2 | Dark mode,—&gt; List and Dictionaries. | .",
          "url": "https://khalidfarahhh.github.io/project-1/_pages/01_Table.html",
          "relUrl": "/_pages/01_Table.html",
          "date": ""
      }
      
  

  

  
      ,"page2": {
          "title": "Analyzing stocks- Mr. Buxton",
          "content": "This website is built and run by Khalid Farah 1. . Assignment . Buxton Intro to Finance 2: Period 1 8/29/2022 . . Analysis 01: Lucid Group . Current Pro Rating: Hold the stock . Current Price: $15.69 . Forecast Price: $50.00 (long term) $12.00 (short term) . News: Lucid Group has decided to start distributing its franchise within the European electric automotive industry, it is developing into a solid competition for other EV companies such as Tesla and startups like Rivian. (Reuters 1/4/22) – . Lucid announces deal for the purchase of up to 100,00 Electric vehicles (Lucid 1) . To enhance the journey experience, Lucid plans to collaborate with Gracenote, an audio technology company that can potentially enhance Lucid’s sound system and its new entertainment system which can be used during long road trips. (Yahoo Finance 1/5/22) . Summary: Lucid is a barely new electric car company with very little credit to its name. They will continue to struggle in the electric car market with competitors like Tesla and other major car manufacturers. Its upside is being highly luxurious while having the same torque as an electric car. . KHALID FARAH &#8617; . |",
          "url": "https://khalidfarahhh.github.io/project-1/About/",
          "relUrl": "/About/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://khalidfarahhh.github.io/project-1/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}