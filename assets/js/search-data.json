{
  
    
        "post0": {
            "title": "JavaScript Ticket",
            "content": "Click the Circles . Click the Circles . Score: 0 . .",
            "url": "https://khalidfarahhh.github.io/project-1/2023/06/07/23-JavaScript-Ticket.html",
            "relUrl": "/2023/06/07/23-JavaScript-Ticket.html",
            "date": " • Jun 7, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "First Jupyter Notebook",
            "content": "print(&quot;hello class&quot;) . hello class .",
            "url": "https://khalidfarahhh.github.io/project-1/jupyter/2023/06/06/_08_21_1st_Notebook-(1).html",
            "relUrl": "/jupyter/2023/06/06/_08_21_1st_Notebook-(1).html",
            "date": " • Jun 6, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "HTML Fragments and Javascript Kernel",
            "content": "function logIt(output) { console.log(output); } logIt(&quot;Hello everyone!&quot;); . Hello everyone! . function logt(output) { console.log(output); } // calls to the function logt(&quot;Mr. Mortensen IS COOL&quot;); . Mr. Mortensen IS COOL . // define a function to hold data for a Person function Person(name, nationality, age) { this.name = name; this.nationality = nationality; this.age = age; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // defines the manager var manager = new Person(&quot;Fortnite&quot;, &quot;Fortnite&quot;, 70); manager.setRole(&quot;Manager&quot;); // JSON conversion from object to a string Person.prototype.toJSON = function() { const obj = {name: this.name, nationality: this.nationality, age: this.age, role: this.role}; const json = JSON.stringify(obj); return json; } // player data var players = [ new Person(&quot;Ty olsen&quot;, &quot;Mexican&quot;, 16), new Person(&quot;Khalid Farah&quot;, &quot;Palestinian&quot;, 16), new Person(&quot;Jeffery Fonseca&quot;, &quot;African-American&quot;, 17), new Person(&quot;Eli Gilmour&quot;, &quot;Caucasian&quot;, 16), new Person(&quot;Chris Albertson&quot;, &quot;Syrian&quot;, 16), new Person(&quot;Ryan McWeeny&quot;, &quot;Caucasian&quot;, 16), ]; function Squad(Leader, players){ this.manager = Leader; this.squad = [Leader]; this.players = players; this.players.forEach(player =&gt; {player.setRole(&quot;Player&quot;); this.squad.push(player); }); this.json = []; this.squad.forEach(player =&gt; this.json.push(player.toJSON())); } var FUT = new Squad(manager, players); Squad.prototype._toHtml = function() { var style = ( &quot;display:inline-block;&quot; + &quot;background:black;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Nationality&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Age&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Occupation&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of lakers team for (var row of FUT.squad) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.nationality + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.age + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(FUT._toHtml()); . NameNationalityAgeOccupation . Fortnite | Fortnite | 70 | Manager | Ty olsen | Mexican | 16 | Player | Khalid Farah | Palestinian | 16 | Player | Jeffery Fonseca | African-American | 17 | Player | Eli Gilmour | Caucasian | 16 | Player | Chris Albertson | Syrian | 16 | Player | Ryan McWeeny | Caucasian | 16 | Player | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . . .",
            "url": "https://khalidfarahhh.github.io/project-1/collegeboard/2023/06/06/HTMLFrag+JSkernel.html",
            "relUrl": "/collegeboard/2023/06/06/HTMLFrag+JSkernel.html",
            "date": " • Jun 6, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Python 2D Iteration and Animation",
            "content": "2D Programming and Resources . There are lots of applications for 2D data. Common terms in 2D are tabular data, row/columns, matrix, etc. Nested iterative loops are often used to find or discover each cell in a 2D array. . 2D samples and challenges in Jupyter. wget link:https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/2023-05-16-DS-arrays_lab.ipynb- Mario animations in JS, these are markdown code examples. Assets metadata yml, wget and place in _data directory; sprite, download and place in images directory | Code to interact with Sprite Animations runtime, wget code | Game starters runtime, wget imperative code, wget oop code | . | . Python 2D array . Example of pre-populating 2D array and printing using 3 different styles . Candy Challenge:print a christmas tree and trunk | . &quot;&quot;&quot; * Creator: Nighthawk Coding Society 2D arrays &quot;&quot;&quot; # Classic nested loops using ij indexes, this shows 2 dimensions def print_matrix1(matrix): print(&quot;Classic nested loops using ij indexes&quot;) for i in range(len(matrix)): # outer loop (i), built on length of matrix (rows) for j in range(len(matrix[i])): # inner loop (j), built on length of items (columns) print(matrix[i][j], end=&quot; &quot;) # [i][j] is 2D representation, end changes newline to space print() # Enhanced nested for loops, row and col variables def print_matrix2(matrix): print(&quot;Enhanced nested for loops&quot;) for row in matrix: # short hand row iterator, index is not required for col in row: # short hand column iterator print(col, end=&quot; &quot;) print() # For loop with shortcut (*) row expansion def print_matrix3(matrix): print(&quot;For loop with shortcut (*) row expansion&quot;) for row in matrix: print(*row) # pythons has (*) that is one line expansion of row into columns def test_matrices(): # setup some text matrices keypad = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [&quot; &quot;, 0, &quot; &quot;]] keyboard = [[&quot;`&quot;, 1, &quot; &quot;, 2, &quot; &quot;,3, &quot; &quot;, 4, &quot; &quot;, 5, &quot; &quot;, 6, &quot; &quot;, 7, &quot; &quot;, 8, &quot; &quot;, 9, &quot; &quot;, 0, &quot; &quot;, &quot;-&quot;,&quot; &quot;, &quot;=&quot;], [&quot; &quot;, &quot; &quot;, &quot;Q&quot;, &quot; &quot;, &quot;W&quot;, &quot; &quot;, &quot;E&quot;, &quot; &quot;, &quot;R&quot;, &quot; &quot;, &quot;T&quot;, &quot; &quot;, &quot;Y&quot;, &quot; &quot;, &quot;U&quot;, &quot; &quot;, &quot;I&quot;, &quot; &quot;, &quot; &quot;, &quot;O&quot;, &quot; &quot;, &quot;P&quot;, &quot; &quot;, &quot;[&quot;, &quot; &quot;, &quot;]&quot;, &quot; &quot;, &quot; &quot;], [&quot; &quot;, &quot; &quot;, &quot; &quot;, &quot;A&quot;, &quot; &quot;, &quot;S&quot;, &quot; &quot;, &quot;D&quot;, &quot; &quot;, &quot;F&quot;, &quot; &quot;, &quot;G&quot;, &quot; &quot;, &quot;H&quot;, &quot; &quot;, &quot;J&quot;, &quot; &quot;, &quot;K&quot;, &quot; &quot;, &quot;L&quot;, &quot; &quot;, &quot;;&quot;, &quot; &quot;, &quot;&#39;&quot;], [&quot; &quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;, &quot;Z&quot;, &quot; &quot;, &quot;X&quot;, &quot; &quot;, &quot;C&quot;, &quot; &quot;, &quot;V&quot;, &quot; &quot;, &quot;B&quot;, &quot; &quot;, &quot;N&quot;, &quot; &quot;, &quot;M&quot;, &quot; &quot;, &quot;,&quot;, &quot; &quot;, &quot;.&quot;, &quot; &quot;, &quot;/&quot;]] numbers = [ [0, 1], # binary [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], # decimal [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, &quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;] # hexadecimal ] # pack into a list of matrices with titles matrices = [ [&quot;Keypad&quot;, keypad], [&quot;Keyboard&quot;, keyboard], [&quot;Number Systems&quot;, numbers] ] # loop 2D matrix with returning list in [key, value] arrangement for title, matrix in matrices: # unpack title and matrix as variables # formatted message with concatenation print(title, len(matrix), &quot;x&quot;, &quot;~&quot; + str(len(matrix[0]))) # use three different methods print_matrix1(matrix) print_matrix2(matrix) print_matrix3(matrix) # blank link in between print() # tester section if __name__ == &quot;__main__&quot;: test_matrices() . Keypad 4 x ~3 Classic nested loops using ij indexes 1 2 3 4 5 6 7 8 9 0 Enhanced nested for loops 1 2 3 4 5 6 7 8 9 0 For loop with shortcut (*) row expansion 1 2 3 4 5 6 7 8 9 0 Keyboard 4 x ~24 Classic nested loops using ij indexes ` 1 2 3 4 5 6 7 8 9 0 - = Q W E R T Y U I O P [ ] A S D F G H J K L ; &#39; Z X C V B N M , . / Enhanced nested for loops ` 1 2 3 4 5 6 7 8 9 0 - = Q W E R T Y U I O P [ ] A S D F G H J K L ; &#39; Z X C V B N M , . / For loop with shortcut (*) row expansion ` 1 2 3 4 5 6 7 8 9 0 - = Q W E R T Y U I O P [ ] A S D F G H J K L ; &#39; Z X C V B N M , . / Number Systems 3 x ~2 Classic nested loops using ij indexes 0 1 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 A B C D E F Enhanced nested for loops 0 1 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 A B C D E F For loop with shortcut (*) row expansion 0 1 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 A B C D E F . JavaScript 2D array . Example below populate a 2D array. Key concepts are ij loop and assignments. Observe the object that is created in console. Learn the basics of iteration through 2D array in JavaScript. . Candy challenge:Work of pairs. Create one of the Python examples (christmas tree, keyboard, ...). Use the element.append to output within the notebook. As you work on JavaScript make sure your development enviornment is setup like JavaScript programmer. | . %%js /* * Creator: Nighthawk Coding Society Construct a two-dimensional array in JS */ var arr2D = []; var rows = 3; var cols = 4; // Loop to initialize 2D array elements for (var i = 0; i &lt; rows; i++) { arr2D[i]=[]; for (var j = 0; j &lt; cols; j++) { arr2D[i][j] = &quot;r:&quot; + i + &quot;c:&quot; + j; } } console.log(arr2D); element.append(arr2D); . Monkey Jumpers Poem . Here are some of the key parts of these arrays . Build ASCII monkeys, 5 different monkeys using ASCII Art for the &quot;Monkey Jumpers&quot; countdown poem | ANSII Color codes are added to each Monkey | Candy Challenge:Print monkeys horizontally versus vertically. | . &quot;&quot;&quot; * Creator: Nighthawk Coding Society * Mini Lab Name: Hello Series, featuring Monkey Jumpers Poem &quot;&quot;&quot; import time # used for delay from IPython.display import clear_output # jupyter specific clear def main(): # ANSI Color Codes Red = &quot; u001b[31m&quot; Green = &quot; u001b[32m&quot; Yellow = &quot; u001b[33m&quot; Blue = &quot; u001b[34m&quot; Magenta = &quot; u001b[35m&quot; &quot;&quot;&quot; 2D array data assignment &quot;&quot;&quot; monkeys = [ [ Red, &quot;ʕง ͠° ͟ل͜ ͡°)ʔ &quot;, # [0][0] eyes &quot; _⏄_/ &quot;, # [0][1] chin &quot; --0-- &quot;, # [0][2] body &quot; ⎛ ⎞ &quot; # [0][3] legs ], [ Green, &quot; ʕ༼ ◕_◕ ༽ʔ &quot;, # [1][0] &quot; _⎏_/ &quot;, &quot; ++1++ &quot;, &quot; ⌋ ⌊ &quot; ], [ Yellow, &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, # [2][0] &quot; _⎐_/ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; 〈 〉 &quot; ], [ Blue, &quot;ʕ ͡° ͜ʖ ° ͡ʔ&quot;, # [3][0] &quot; _⍾_/ &quot;, &quot; ==3== &quot;, &quot; _/ _ &quot; ], [ Magenta, &quot; (◕‿◕✿) &quot;, # [4][0] &quot; _⍾_/ &quot;, # [4][1] &quot; ==4== &quot;, # [4][2] &quot; _/ _ &quot; # [4][3] ] ] &quot;&quot;&quot; 2D array program logic &quot;&quot;&quot; # cycles through 2D array backwards for i in range(len(monkeys), -1, -1): clear_output(wait=True) print(&quot;Nursery Rhyme&quot;) # identification message # this print statement shows current count of Monkeys # concatenation (+) of the loop variable and string to form a countdown message print(str(i) + &quot; little monkeys jumping on the bed...&quot;) # cycle through monkeys that are left in poem countdown for row in range(i - 1, -1, -1): # cycles through remaining monkeys in countdown # cycles through monkey part by part for col in range(len(monkeys[row])): # prints specific part of the monkey from the 2D cell print(monkeys[row][col] + &quot; &quot;) # this new line gives separation between stanza of poem print(&quot; u001b[0m&quot;) # reset color time.sleep(2) # out of all the loops, prints finishing messages clear_output(wait=True) print(&quot;No more monkeys jumping on the bed&quot;) print(&quot;0000000000000000000000000000000000&quot;) print(&quot; THE END &quot;) if __name__ == &quot;__main__&quot;: main() . No more monkeys jumping on the bed 0000000000000000000000000000000000 THE END . Animation, the Energetic versus Lazy Programmer methods . Animation is done like the old Disney films, lots of little images put togehter. In these examples we eliminate using a 2D array, but simulate int with a sequence of print statements. . This 1st sequence is a lot of lines of code. | The 2nd takes the lazy programmer method to do the same. | Candy challenge:Make you own ASCII art animation. | . &quot;&quot;&quot; * Creator: Nighthawk Coding Society Sailing Ship Animation (long method) &quot;&quot;&quot; import time # used for delay from IPython.display import clear_output # jupyter specific clear # ANSI Color Codes Color34 = &quot; u001b[34m&quot; Color37 = &quot; u001b[37m&quot; # As you can see, its not very optimal def ship1(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship2(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship3(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship4(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship5(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship6(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship7(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship8(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship9(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship10(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship11(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship12(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship13(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship14(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship15(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship16(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship17(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship18(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship19(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship20(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) clear_output(wait=True) time.sleep(.1) ship1() time.sleep(.5) clear_output(wait=True) ship2() time.sleep(.5) clear_output(wait=True) ship3() time.sleep(.5) clear_output(wait=True) ship4() time.sleep(.5) clear_output(wait=True) ship5() time.sleep(.5) clear_output(wait=True) ship6() time.sleep(.5) clear_output(wait=True) ship7() time.sleep(.5) clear_output(wait=True) ship8() time.sleep(.5) clear_output(wait=True) ship9() time.sleep(.5) clear_output(wait=True) ship10() time.sleep(.5) clear_output(wait=True) ship11() time.sleep(.5) clear_output(wait=True) ship12() time.sleep(.5) clear_output(wait=True) ship13() time.sleep(.5) clear_output(wait=True) ship14() time.sleep(.5) clear_output(wait=True) ship15() time.sleep(.5) clear_output(wait=True) ship16() time.sleep(.5) clear_output(wait=True) ship17() time.sleep(.5) clear_output(wait=True) ship18() time.sleep(.5) clear_output(wait=True) ship19() time.sleep(.5) clear_output(wait=True) ship20() time.sleep(.5) . | |/ __ |__/ ____/ -- . &quot;&quot;&quot; * Creator: Nighthawk Coding Society Sailing Ship Animation (programatic method) &quot;&quot;&quot; import time # used for delay from IPython.display import clear_output # jupyter specific clear # ANSI Color Codes OCEAN_COLOR = u&quot; u001B[34m u001B[2D&quot; SHIP_COLOR = u&quot; u001B[35m u001B[2D&quot; RESET_COLOR = u&quot; u001B[0m u001B[2D&quot; def ship_print(position): # print ship with colors and leading spaces according to position clear_output(wait=True) print(RESET_COLOR) sp = &quot; &quot; * position print(sp + &quot; | &quot;) print(sp + &quot; |/ &quot;) print(SHIP_COLOR, end=&quot;&quot;) print(sp + &quot; __ |__/ &quot;) print(sp + &quot; ____/ &quot;) print(OCEAN_COLOR + &quot;--&quot;*32 + RESET_COLOR) def ship(): # ship function, loop/controller for animation speed and times # loop control variables start = 0 # start at zero distance = 60 # how many times to repeat step = 2 # count by 2 # loop purpose is to animate ship sailing for position in range(start, distance, step): ship_print(position) # call to function with parameter time.sleep(.2) ship() # activate/call ship function . | |/ __ |__/ ____/ - .",
            "url": "https://khalidfarahhh.github.io/project-1/1.d/2.b/3.b/c3.1/2023/05/16/DS-arrays_lab.html",
            "relUrl": "/1.d/2.b/3.b/c3.1/2023/05/16/DS-arrays_lab.html",
            "date": " • May 16, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Vardaan group hacks",
            "content": "hacks . KASM hacks Virtual desktops allow users to access a complete desktop environment remotely, without the need for physical hardware. KASM is a security feature that isolates each virtual machine from others, providing enhanced security. In an AP CSP environment, virtual desktops can be utilized to provide students with access to a consistent and secure computing environment, allowing them to complete coursework and practice coding without needing to install software or worry about hardware limitations. | | AWS Database hacks | . QUIZ 1 Q1: What is the main difference between relational and non-relational databases? . Correct - C. Relational databases are based on tables and use SQL, while non-relational databases are based on collections and use JSON-like documents. . Q2: Which AWS database service is best suited for applications that require low-latency speed? . Correct - A. Amazon ElastiCache . Q3: What is the purpose of the code example provided in the lesson? . Correct - C. To provide an example of how to connect to a database instance in RDS using Python. . QUIZ 2 . Q1: Which of the following is not an AWS database option? . Correct - C. SQLite . Q2: Which of the following is a file-based, lightweight RDBMS? . Correct - D. SQLite . Q3: Which AWS service enables you to store and query highly connected datasets? . Correct - C. Amazon Neptune . DUCK DNS Duck DNS is an essential part of the internet infrastructure that translates human-readable domain names like www.khalidfarah.com into IP addresses that computers can understand. We use DNS to access websites, send emails, and connect to other online services. DNS allows us to remember domain names easily and eliminates the need to remember IP addresses. | . DuckDNS is a free dynamic DNS service that allows users to assign a custom domain name to their public IP address, making it easier to access their home network devices remotely. DuckDNS works by running a client script on a device connected to the network that periodically sends the current IP address to DuckDNS servers, which then update the DNS record with the new IP address. DuckDNS is unique in that it does not require users to register or provide any personal information to use the service, and it supports multiple subdomains per account. . DuckDNS is useful for our projects because it enables us to access our home network devices remotely without having to remember the IP address or perform complex configurations. We can use DuckDNS to access our Raspberry Pi servers, cameras, and other IoT devices securely and conveniently from anywhere in the world. . Here is how you set up Duck DNS in a few steps . Go to the DuckDNS website and sign up for an account. Choose a custom subdomain name for your account. Install the DuckDNS client script on a device connected to your network. Configure the client script to run periodically and send the current IP address to the DuckDNS servers. Update your router’s port forwarding settings to forward traffic to the appropriate device on your network. Test your setup by accessing your custom domain name from a remote location. . 4 I did not do deployment for my Group last tri. | 6 . | Cerbot hacks attempted didnt work inshallah next time | . OpenSSL and LibreSSL are both popular open-source cryptographic libraries used for secure communication on the Internet. While both libraries share many similarities in their security features, there are some differences between the two. OpenSSL is a widely used library that supports a variety of cryptographic algorithms, including SSL/TLS protocols, PKI, and cryptographic hashing. It also provides a comprehensive set of features for secure communication, such as support for hardware acceleration, session resumption, and perfect forward secrecy. OpenSSL has been the subject of various security vulnerabilities over the years, including Heartbleed, DROWN, and more recently, the “ChaCha20-Poly1305 zero-length padding” vulnerability. both OpenSSL and LibreSSL provide a wide range of security features for secure communication on the Internet. However, LibreSSL has been developed with a focus on security and simplicity, and it has improved on some of the vulnerabilities present in OpenSSL. While both libraries may still be vulnerable to future security issues, it’s important to keep them updated to their latest versions to ensure maximum security. .",
            "url": "https://khalidfarahhh.github.io/project-1/fastpages/markdown/2023/04/26/vardaanhacks.html",
            "relUrl": "/fastpages/markdown/2023/04/26/vardaanhacks.html",
            "date": " • Apr 26, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "P4-Y 4/25 Guide to SASS",
            "content": "WGET this file and complete fully and thoroughly in order to be receive credit . Wget Link . Team Lesson Plan: . SASS Part 1- Nathan, Aniket, Kalani . Basic UI Properties and what they mean | Color properties | Themes | SASS Definition/What it is useful for | SASS code segments w/ comparison to css | Demonstration of SASS | . SASS Part 2- Max W, Evan . More UI Properties | UX | Layouts | Animation/animation code for UI | . Building JavaScript Game or Application- Ryan, Jaden . Before vs After Minesweeper Game - how to customize | Building a java script game and what it requires | . Hacks Page - Kalani, Max T . Students must create their own hack (simple app,game, etc using key components from the lesson) | Make sure the students can wget the file so they can work on it for their hacks | . Classwork: . What are 5 Basic UI Elements?: . Color | Font | Layout | Icons | Interactivity | In your own words, explain what SASS does: . It helps u style stuff with less complexity compared to CSS | . What are some benefits to SASS?: . Facilitates you to write clean, easy and less CSS ina programming contrust | . Describe/Explain one of the more &quot;advanced&quot; SASS properties below in detail: . Key frame which animates | . Link to Number Guesser Game . How does the number guesser game work? . The system has a number and if the user inputs a number lower it will output too low and if its higher than the actual number it will output too high and it will record your attempts until you get it correct to where the screen will turn green | . Explain how SASS can be used to make the number guesser game look more visually appealing? . The text could be bigger and the text could contain color. The background could be a radiant color | . Hacks - Insert any screenshots, code segments, etc. that you need to in order to demonstrate an understanding of the hacks . Hacks Part 1 . Add your own element to your own repository to make it unique (0.9) | I have a radiant background color in my fast pages https://github.com/khalidfarahhh/project-1/issues/24 | . Hacks Part 2 . Add the style change button to your own github page (0.9) Change the button to your own styles | See if you can let make it change to multiple different styles (we understand that it is hard to create multiple distinct styles so you are only required to make it clear you have at least three different styles at can be changed) | . | Extra: Try and incorporate something you learned in the lesson into your CPT Project (0.1) &lt;!DOCTYPE html&gt; | Theme Changer Button . Theme Changer . Hacks Part 3 . Add SASS to Number Guesser Game provided (0.9) or create your own Javascript game/application and add SASS to it (0.9+) | We will collectively decide on the &quot;best&quot; game/app and award potential seed. | Copy and paste the following code segment into a markdown file which will be used for the hacks: . Guess the Number . Guess the Number . Try to guess the number between 1 and 100. . Submit . .",
            "url": "https://khalidfarahhh.github.io/project-1/student/2023/04/25/P4Y-SASSGuide.html",
            "relUrl": "/student/2023/04/25/P4Y-SASSGuide.html",
            "date": " • Apr 25, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Computers and Networks (Unit 4)",
            "content": "Requirements . Work through College Board Unit 4… blog, add definitions, and pictures. Be creative, for instance make a story of Computing and Networks that is related to your PBL experiences this year. . How a Computer Works . As we have learned, a computer needs aa program to do something smart. The sequence of a program initiates a series of actions with the computers Central Processing Unit (CPU). This component is essentially a binary machine focussing on program instructions provided. The CPU retrieives and stores the data it acts upon in Random Access Memory (RAM). Between the CPU, RAM, and Storage Devices a computer can work with many programs and large amounts of data. . List specification of your Computer, or Computers if working as Pair/Trio . Processor GHz: i7 2.20 2.21 Ghz | Memory in GB: 16 | Storage in GB: 931 | OS: Windows 10 | . Define or describe usage of Computer using Computer Programs. Pictures are preferred over a lot of text. Use your experience. . Input devices :These are devices used to enter data into a computer. Examples of input devices include keyboards, mice, and touchscreens. | Output devices: These are devices used to display or output data from a computer. Examples of output devices include monitors, printers, and speakers. | Program File: This is a file that contains instructions for a computer program. It may contain code, data, or both. | Program Code: This is the set of instructions that tells a computer what to do. It is usually written in a programming language such as Python or Java. | Processes: These are programs or tasks that are running on a computer. They can be viewed in the task manager or activity monitor. | Ports: These are connectors on a computer that allow devices to communicate with it. Examples of ports include USB, HDMI, and Ethernet. | Data File: This is a file that contains data such as text, images, or videos. It can be opened and edited using a program that supports its file format. | Inspect Running Code: This is the process of examining the code that is currently running on a computer. It can be done using a debugger or other developer tools. | Inspect Variables: This is the process of examining the values of variables in a program. It can be done using a debugger or other developer tools. | . . The Internet . Watch/review College Board Daily Video for 4.1.1 . Essential Knowledge A computing device is a physical artifact that can run a program. Some examples include computers, tablets, servers, routers, and smart sensors. | A computing system is a group of computing devices and programs working together for a common purpose. | A computer network is a group of interconnected computing devices capable of sending or receiving data. | A computer network is a type of computing system. | A path between two computing devices on a computer network (a sender and a receiver) is a sequence of directly connected computing devices that begins at the sender and ends at the receiver. | Routing is the process of finding a path from sender to receiver. | The bandwidth of a computer network is the maximum amount of data that can be sent in a fixed amount of time. | Bandwidth is usually measured in bits per second | . | Complete Vocabulary Matching Activity. Incorporate this into your learnings from year. To analyze measure path and latency use traceroute and ping commands from Linux Terminal. Path: A | Route: E | Computer System: B | Computer Device: C | Bandwidth: D | Computer Network: F | . | . Watch/review College Board Daily Video 4.1.2 . Complete True of False Questions | T | F | F | T | F | F | T . | Essential Knowledge The internet is a computer network consisting of interconnected networks that use standardized, open (nonproprierary) communication protocols. | Access to the internet depends on the ability to connect a computing device to an internet connected device. | A protocol is an agreed-upon set of rules that specify the behavior of a system. | The protocols used in the internet are open, which allows users to easily connect additional computing devices to the internet. | Routing on the internet is usually dynamic; it is not specified in advance | The scalability of a system is the capacity for the system to change in size and scale to meet new demands. | The internet was designed to be scalable | Information is passed through the internet as a data stream. Data streams contain chunks of data, which are encapsulated in packets. | Packets contain a chunk of data and metadata used for routing the packet between the origin and the destination on the internet, as well as for data reassembly. | Packets may arrive at the destination in order, out of order, or not at all | IP, TCP and UDP are common protocols used on the internet. | The world wide web is a system of linked pages, programs, and files. | HTTP is a protocol used by the world wide web | The world wide web uses the internet | . | Go over AP videos, vocabulary, and essential knowledge. Draw a diagram showing the internet and its many levels. A preferred diagram would using your knowledge of frontend, backend, deployment, etc. Picture would highligh vocabulary by illustration. The below illustration have some ideas | . . Often we draw pictures of machines communicating over the Internet with arrows. However, the real communication goes through protocol layers and the machine and then is trasported of the network. For College Board and future Computer Knowledge you should become familiar with the following … | . User Machine &lt;&gt; Frontend Server &lt;&gt; Backend Server +--+ +--+ +--+ | Browser | | GH Page | | Flask | +--+ ^ +--+ ^ +--+ | HTTP | | | HTTP | | | HTTP | +--+ | +--+ | +--+ | TCP | | | TCP | | | TCP | +--+ | +--+ | +--+ | IP | V | IP | V | IP | +--+ +--+ +--+ | Network | &lt;&gt; | Network | &lt;&gt; | Network | +--+ +--+ +--+ . The “http” layer is an application layer protocol in the TCP/IP stack, used for communication between web browsers and web servers. It is the protocol used for transmitting data over the World Wide Web. . The “transport” layer (TCP) is responsible for providing reliable data transfer between applications running on different hosts. The TCP protocol segments the data into smaller chunks called “segments”. Each segment contains a sequence number that identifies its position in the original stream of data, as well as other control information such as source and destination port numbers, and checksums for error detection. . The “ip” layer is responsible for packetizing data received from the TCP layer of the protocol stack, and then encapsulating the data into IP packets. The IP packets are then sent to the lower layers of the protocol stack for transmission over the network. . The “network” layer is responsible for routing data packets between networks using the Internet Protocol (IP). This layer handles tasks such as packet addressing and routing, fragmentation and reassembly, and network congestion control. . Fault Tolerance . Watch both Daily videos for 4.2 . Complete the network activity, summarize your understanding of fault tolerance. | Fault tolerance refers to the ability of a system to continue functioning even if some of its components fail or malfunction | . Parallel and Distributed Computing . Review previous lecture on Parallel Computing and watch Daily vidoe 4.3. Think of ways to make something in you team project to utilize Cores more effectively. Here are some thoughts to add to your story of Computers and Networks… . What is naturally Distributed in Frontend/Backend archeticture? Frontend is responisble for userinterface and backend is more data . | Analyze this command in Docker: ENV GUNICORN_CMD_ARGS=&quot;--workers=1 --bind=0.0.0.0:8086&quot;. Determine if there is options are options in this command for parallel computing within the server that runs python/gunicorn. Here is an article | this command does not contain options for parallel computing within the Gunicorn server that runs Python. | . Last week we discussed parallel computing on local machine. There are many options. Here is something to get parallel computing work with a tool called Ray. . Review this article… Can you get parallel code on images to work more effectively? I have not tried Ray. | . Code example from ChatGPT using squares. This might be more interesting if nums we generated to be a lot bigger. | . import ray # define a simple function that takes a number and returns its square def square(x): return x * x # initialize Ray ray.init() # create a remote function that squares a list of numbers in parallel @ray.remote def square_list(nums): return [square(num) for num in nums] # define a list of numbers to square nums = [1, 2, 3, 4, 5] # split the list into two parts split_idx = len(nums) // 2 part1, part2 = nums[:split_idx], nums[split_idx:] # call the remote function in parallel on the two parts part1_result = square_list.remote(part1) part2_result = square_list.remote(part2) # get the results and combine them result = ray.get(part1_result) + ray.get(part2_result) # print the result print(result) .",
            "url": "https://khalidfarahhh.github.io/project-1/2023/04/05/AP_computers_networks.html",
            "relUrl": "/2023/04/05/AP_computers_networks.html",
            "date": " • Apr 5, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Data Structures- Hashmaps, Sets, Hash Tables, Hashing and Collisions",
            "content": "What is a Hashtable/Hashmap? . A hashtable is a data structure that with a collection of key-value pairs, where each key maps to a value, and the keys must be unique and hashable. . In Python there is a built in hashtable known as a Dictionary. | . The primary purpose of a hashtable is to provide efficient lookup, insertion, and deletion operations. When an element is to be inserted into the hashtable, a hash function is used to map the key to a specific index in the underlying array that is used to store the key-value pairs. The value is then stored at that index. When searching for a value, the hash function is used again to find the index where the value is stored. . The key advantage of a hashtable over other data structures like arrays and linked lists is its average-case time complexity for lookup, insertion, and deletion operations. . The typical time complexity of a hashtable is o to the 1. | . What is Hashing and Collision? . Hashing is the process of mapping a given key to a value in a hash table or hashmap, using a hash function. The hash function takes the key as input and produces a hash value or hash code, which is then used to determine the index in the underlying array where the value is stored. The purpose of hashing is to provide a quick and efficient way to access data, by eliminating the need to search through an entire data structure to find a value. . However, it is possible for two different keys to map to the same hash value, resulting in a collision. When a collision occurs, there are different ways to resolve it, depending on the collision resolution strategy used. . Python&#39;s dictionary implementation is optimized to handle collisions efficiently, and the performance of the dictionary is generally very good, even in the presence of collisions. However, if the number of collisions is very high, the performance of the dictionary can degrade, so it is important to choose a good hash function that minimizes collisions when designing a Python dictionary. . What is a Set? . my_set = set([1, 2, 3, 2, 1]) print(my_set) # What do you notice in the output? # Only 3 of the 5 values are there # Why do you think Sets are in the same tech talk as Hashmaps/Hashtables? # Maybe also an example of a hash table . {1, 2, 3} . Dictionary Example . Below are just some basic features of a dictionary. As always, documentation is always the main source for all the full capablilties. . lover_album = { &quot;title&quot;: &quot;Lover&quot;, &quot;artist&quot;: &quot;Taylor Swift&quot;, &quot;year&quot;: 2019, &quot;genre&quot;: [&quot;Pop&quot;, &quot;Synth-pop&quot;], &quot;tracks&quot;: { 1: &quot;I Forgot That You Existed&quot;, 2: &quot;Cruel Summer&quot;, 3: &quot;Lover&quot;, 4: &quot;The Man&quot;, 5: &quot;The Archer&quot;, 6: &quot;I Think He Knows&quot;, 7: &quot;Miss Americana &amp; The Heartbreak Prince&quot;, 8: &quot;Paper Rings&quot;, 9: &quot;Cornelia Street&quot;, 10: &quot;Death By A Thousand Cuts&quot;, 11: &quot;London Boy&quot;, 12: &quot;Soon You&#39;ll Get Better (feat. Dixie Chicks)&quot;, 13: &quot;False God&quot;, 14: &quot;You Need To Calm Down&quot;, 15: &quot;Afterglow&quot;, 16: &quot;Me! (feat. Brendon Urie of Panic! At The Disco)&quot;, 17: &quot;It&#39;s Nice To Have A Friend&quot;, 18: &quot;Daylight&quot; } } # What data structures do you see? # Dictionaries, lists, strings # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;}} . print(lover_album.get(&#39;tracks&#39;)) # or print(lover_album[&#39;tracks&#39;]) . {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;} {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;} . print(lover_album.get(&#39;tracks&#39;)[4]) # or print(lover_album[&#39;tracks&#39;][4]) . The Man The Man . lover_album[&quot;producer&quot;] = [&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;] # What can you change to make sure there are no duplicate producers? # Make producer array into a set instead # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;}, &#39;producer&#39;: [&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;]} . lover_album[&quot;tracks&quot;].update({19: &quot;All Of The Girls You Loved Before&quot;}) # How would add an additional genre to the dictionary, like electropop? # lover_album[&quot;genre&quot;].append(&quot;electropop&quot;) # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;, 19: &#39;All Of The Girls You Loved Before&#39;}, &#39;producer&#39;: [&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;]} . for k,v in lover_album.items(): # iterate using a for loop for key and value print(str(k) + &quot;: &quot;, end=&quot;&quot;) if (type(v) == list or type(v) == set): for v2 in v: print(&quot; n t &quot; + v2) elif (type(v) == dict): for k2,v2 in v.items(): print(&quot; n t&quot; + str(k2) + &quot;: &quot; + str(v2)) else: print(&quot; n t&quot; + str(v)) # Write your own code to print tracks in readable format # . title: Lover artist: Taylor Swift year: 2019 genre: Pop Synth-pop tracks: 1: I Forgot That You Existed 2: Cruel Summer 3: Lover 4: The Man 5: The Archer 6: I Think He Knows 7: Miss Americana &amp; The Heartbreak Prince 8: Paper Rings 9: Cornelia Street 10: Death By A Thousand Cuts 11: London Boy 12: Soon You&#39;ll Get Better (feat. Dixie Chicks) 13: False God 14: You Need To Calm Down 15: Afterglow 16: Me! (feat. Brendon Urie of Panic! At The Disco) 17: It&#39;s Nice To Have A Friend 18: Daylight 19: All Of The Girls You Loved Before producer: Taylor Swift Jack Antonoff Joel Little Taylor Swift Louis Bell Frank Dukes . def search(): search = input(&quot;What would you like to know about the album?&quot;) if lover_album.get(search.lower()) == None: print(&quot;Invalid Search&quot;) else: print(lover_album.get(search.lower())) search() # This is a very basic code segment, how can you improve upon this code? # search tracks . Invalid Search . Hacks . Answer ALL questions in the code segments | Create a diagram or comparison illustration (Canva). What are the pro and cons of using this data structure? | Dictionary vs List | . | Expand upon the code given to you, possible improvements in comments | Build your own album showing features of a python dictionary . | For Mr. Yeung&#39;s class: Justify your favorite Taylor Swift song, answer may effect seed . | . my_turn_album = { &quot;title&quot;: &quot;My Turn&quot;, &quot;artist&quot;: &quot;Lil Baby&quot;, &quot;genre&quot;: &quot;Trap&quot;, &quot;songs&quot;: [ &quot;Get Ugly&quot;, &quot;Heatin Up&quot;, &quot;How&quot;, &quot;Grace&quot;, &quot;Woah&quot;, &quot;Live Off My Closet&quot;, &quot;Same Thing&quot;, &quot;Emotionally Scarred&quot;, &quot;Commercial&quot;, &quot;Forever&quot;, &quot;Can&#39;t Explain&quot;, &quot;No Sucker&quot;, &quot;Sum 2 Prove&quot;, &quot;We Should&quot;, &quot;Catch The Sun&quot;, &quot;Consistent&quot; ] } # Access the dictionary keys and values print(&quot;Album title: &quot; + my_turn_album[&quot;title&quot;]) print(&quot;Artist: &quot; + my_turn_album[&quot;artist&quot;]) print(&quot;Genre: &quot; + my_turn_album[&quot;genre&quot;]) print(&quot;Songs: &quot; + &quot;, &quot;.join(my_turn_album[&quot;songs&quot;])) . Album title: My Turn Artist: Lil Baby Genre: Trap Songs: Get Ugly, Heatin Up, How, Grace, Woah, Live Off My Closet, Same Thing, Emotionally Scarred, Commercial, Forever, Can&#39;t Explain, No Sucker, Sum 2 Prove, We Should, Catch The Sun, Consistent . DIAGRAM IN GITHUB .",
            "url": "https://khalidfarahhh.github.io/project-1/2023/03/29/DS-hashmaps.html",
            "relUrl": "/2023/03/29/DS-hashmaps.html",
            "date": " • Mar 29, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "Unit 2.4b Using Programs with Data, SQL",
            "content": "Database Programming is Program with Data . The Tri 2 Final Project is an example of a Program with Data. . Prepare to use SQLite in common Imperative Technique . Explore SQLite Connect object to establish database connection- Explore SQLite Cursor Object to fetch data from a table within a database | . Schema of Users table in Sqlite.db . Uses PRAGMA statement to read schema. . Describe Schema, here is resource Resource- What is a database schema? . What is the purpose of identity Column in SQL database? | What is the purpose of a primary key in SQL database? | What are the Data Types in SQL table? | . import sqlite3 database = &#39;files/sqlite.db&#39; # this is location of database def schema(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;users&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() schema() . (0, &#39;id&#39;, &#39;INTEGER&#39;, 1, None, 1) (1, &#39;_name&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (2, &#39;_uid&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (3, &#39;_password&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (4, &#39;_dob&#39;, &#39;DATE&#39;, 0, None, 0) . Reading Users table in Sqlite.db . Uses SQL SELECT statement to read data . What is a connection object? After you google it, what do you think it does? | Same for cursor object? | Look at conn object and cursor object in VSCode debugger. What attributes are in the object? | Is &quot;results&quot; an object? How do you know? | . import sqlite3 def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM users&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() . (1, &#39;Thomas Edison&#39;, &#39;toby&#39;, &#39;sha256$qnazL6OAMLQU1oxb$11ca91d357237efa14818d5107c0a479619ebc6c052776548c95d19bbcfba773&#39;, &#39;1847-02-11&#39;) (2, &#39;Nikola Tesla&#39;, &#39;niko&#39;, &#39;sha256$RP0Cf7mOrhtUDfII$7d4f6229978759555973043173d20e5ee4196cf69840839f3de0b48819d4a4df&#39;, &#39;2023-03-14&#39;) (3, &#39;Alexander Graham Bell&#39;, &#39;lex&#39;, &#39;sha256$lwrPsJnID2P6Egmf$084a7edc3eb1a1eab04652f3734e0ec6f1b1583cb25dc038cb5b8d99b71106a9&#39;, &#39;2023-03-14&#39;) (4, &#39;Eli Whitney&#39;, &#39;whit&#39;, &#39;sha256$s3VDEV0VUEzvmcTD$9a16bb4d6b3cf0a607c7f1e1b28446e9861ae624a38d8e05fb37648a86fbb634&#39;, &#39;2023-03-14&#39;) (5, &#39;Indiana Jones&#39;, &#39;indi&#39;, &#39;sha256$7OH3RZn4puIW6V0q$cd4e02e0ae154b8c7d2d2a5608e008ebb357099506cc21c42f4d6c8035f5e12f&#39;, &#39;1920-10-21&#39;) (6, &#39;Marion Ravenwood&#39;, &#39;raven&#39;, &#39;sha256$L31nlSBrUKrTy0Jz$c4842edea318f286ad2e1d64b188e826de1011fde1ce735e2dfdcb548ad90829&#39;, &#39;1921-10-21&#39;) (7, &#34;khalid farah&#39;&#34;, &#39;123&#39;, &#39;sha256$41sITrbZ638NxKSy$0edc3d037597ba51018fc5a883d7bf78e11b608f4bb8e6ebe2d91bd5970d09a1&#39;, &#39;2006-07-07&#39;) . Create a new User in table in Sqlite.db . Uses SQL INSERT to add row . Compore create() in both SQL lessons. What is better or worse in the two implementations? | Explain purpose of SQL INSERT. Is this the same as User init? | . import sqlite3 def create(): name = input(&quot;Enter your name:&quot;) uid = input(&quot;Enter your user id:&quot;) password = input(&quot;Enter your password&quot;) dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO users (_name, _uid, _password, _dob) VALUES (?, ?, ?, ?)&quot;, (name, uid, password, dob)) # Commit the changes to the database conn.commit() print(f&quot;A new user record {uid} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #create() . Updating a User in table in Sqlite.db . Uses SQL UPDATE to modify password . What does the hacked part do? | Explain try/except, when would except occur? | What code seems to be repeated in each of these examples to point, why is it repeated? | . import sqlite3 def update(): uid = input(&quot;Enter user id to update&quot;) password = input(&quot;Enter updated password&quot;) if len(password) &lt; 2: message = &quot;hacked&quot; password = &#39;gothackednewpassword123&#39; else: message = &quot;successfully updated&quot; # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table cursor.execute(&quot;UPDATE users SET _password = ? WHERE _uid = ?&quot;, (password, uid)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: print(f&quot;The row with user id {uid} the password has been {message}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #update() . Delete a User in table in Sqlite.db . Uses a delete function to remove a user based on a user input of the id. . Is DELETE a dangerous operation? Why? | What is the &quot;f&quot; and {uid} do? | . import sqlite3 def delete(): uid = input(&quot;Enter user id to delete&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM users WHERE _uid = ?&quot;, (uid,)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: # The uid was found in the table and the row was deleted print(f&quot;The row with uid {uid} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #delete() . Menu Interface to CRUD operations . CRUD and Schema interactions from one location by running menu. Observe input at the top of VSCode, observe output underneath code cell. . Why does the menu repeat? | Could you refactor this menu? Make it work with a List? | . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif operation.lower() == &#39;s&#39;: schema() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . Please enter c, r, u, or d A new user record hey has been created A new user record has been created . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | Create a new Table or do something new, sqlite documentation | In implementation in previous bullet, do you see procedural abstraction? | .",
            "url": "https://khalidfarahhh.github.io/project-1/2023/03/16/AP-unit2-4b.html",
            "relUrl": "/2023/03/16/AP-unit2-4b.html",
            "date": " • Mar 16, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "Unit 2.4a Using Programs with Data, SQLAlchemy",
            "content": "Database and SQLAlchemy . In this blog we will explore using programs with data, focused on Databases. We will use SQLite Database to learn more about using Programs with Data. Use Debugging through these examples to examine Objects created in Code. . College Board talks about ideas like . Program Usage. &quot;iterative and interactive way when processing information&quot; | Managing Data. &quot;classifying data are part of the process in using programs&quot;, &quot;data files in a Table&quot; | Insight &quot;insight and knowledge can be obtained from ... digitally represented information&quot; | Filter systems. &#39;tools for finding information and recognizing patterns&quot; | Application. &quot;the preserve has two databases&quot;, &quot;an employee wants to count the number of book&quot; | . | PBL, Databases, Iterative/OOP . Iterative. Refers to a sequence of instructions or code being repeated until a specific end result is achieved | OOP. A computer programming model that organizes software design around data, or objects, rather than functions and logic | SQL. Structured Query Language, abbreviated as SQL, is a language used in programming, managing, and structuring data | . | . Imports and Flask Objects . Defines and key object creations . Comment on where you have observed these working? Provide a defintion of purpose. Flask app object | SQLAlchemy db object | | . &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . Model Definition . Define columns, initialization, and CRUD methods for users table in sqlite.db . Comment on these items in the class, purpose and defintion. class User | db.Model inheritance | init method | @property, @&lt;column&gt;.setter | create, read, update, delete methods | . | . &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class User(db.Model): __tablename__ = &#39;users&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _uid = db.Column(db.String(255), unique=True, nullable=False) _password = db.Column(db.String(255), unique=False, nullable=False) _dob = db.Column(db.Date) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password=&quot;123qwerty&quot;, dob=datetime.today()): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts uid from object @property def uid(self): return self._uid # a setter function, allows uid to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional method used for setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter against stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # dob property is returned as string, a string represents date outside object @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob setter, verifies date type before it is set or default to today @dob.setter def dob(self, dob): if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # age is calculated field, age is returned according to date of birth @property def age(self): today = datetime.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # output content using str(object) is in human readable form # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;uid&quot;: self.uid, &quot;dob&quot;: self.dob, &quot;age&quot;: self.age, } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, uid=&quot;&quot;, password=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(uid) &gt; 0: self.uid = uid if len(password) &gt; 0: self.set_password(password) db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . Initial Data . Uses SQLALchemy db.create_all() to initialize rows into sqlite.db . Comment on how these work? Create All Tables from db Object | User Object Constructors | Try / Except | | . &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initUsers(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=datetime(1847, 2, 11)) u2 = User(name=&#39;Nikola Tesla&#39;, uid=&#39;niko&#39;, password=&#39;123niko&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;whit&#39;, password=&#39;123whit&#39;) u5 = User(name=&#39;Indiana Jones&#39;, uid=&#39;indi&#39;, dob=datetime(1920, 10, 21)) u6 = User(name=&#39;Marion Ravenwood&#39;, uid=&#39;raven&#39;, dob=datetime(1921, 10, 21)) users = [u1, u2, u3, u4, u5, u6] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = user.create() print(f&quot;Created new uid {object.uid}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {user.uid}, or error.&quot;) initUsers() . Records exist uid toby, or error. Records exist uid niko, or error. Records exist uid lex, or error. Records exist uid whit, or error. Records exist uid indi, or error. Records exist uid raven, or error. . Check for given Credentials in users table in sqlite.db . Use of ORM Query object and custom methods to identify user to credentials uid and password . Comment on purpose of following User.query.filter_by | user.password | | . def find_by_uid(uid): with app.app_context(): user = User.query.filter_by(_uid=uid).first() return user # returns user object # Check credentials by finding user and verify password def check_credentials(uid, password): # query email and return user record user = find_by_uid(uid) if user == None: return False if (user.is_password(password)): return True return False #check_credentials(&quot;indi&quot;, &quot;123qwerty&quot;) . Create a new User in table in Sqlite.db . Uses SQLALchemy and custom user.create() method to add row. . Comment on purpose of following user.find_by_uid() and try/except | user = User(...) | user.dob and try/except | user.create() and try/except | | . def create(): # optimize user time to see if uid exists uid = input(&quot;Enter your user id:&quot;) user = find_by_uid(uid) try: print(&quot;Found n&quot;, user.read()) return except: pass # keep going # request value that ensure creating valid object name = input(&quot;Enter your name:&quot;) password = input(&quot;Enter your password&quot;) # Initialize User object before date user = User(name=name, uid=uid, password=password ) # create user.dob, fail with today as dob dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) try: user.dob = datetime.strptime(dob, &#39;%Y-%m-%d&#39;).date() except ValueError: user.dob = datetime.today() print(f&quot;Invalid date {dob} require YYYY-mm-dd, date defaulted to {user.dob}&quot;) # write object to database with app.app_context(): try: object = user.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error uid {uid}&quot;) create() # theo was here . Created {&#39;id&#39;: 7, &#39;name&#39;: &#39;Khalid farah&#39;, &#39;uid&#39;: &#39;kkk&#39;, &#39;dob&#39;: &#39;07-07-2006&#39;, &#39;age&#39;: 16} . Reading users table in sqlite.db . Uses SQLALchemy query.all method to read data . Comment on purpose of following User.query.all | json_ready assignment, google List Comprehension | | . # SQLAlchemy extracts all users from database, turns each user into JSON def read(): with app.app_context(): table = User.query.all() json_ready = [user.read() for user in table] # &quot;List Comprehensions&quot;, for each user add user.read() to list return json_ready read() . [{&#39;id&#39;: 1, &#39;name&#39;: &#39;Thomas Edison&#39;, &#39;uid&#39;: &#39;toby&#39;, &#39;dob&#39;: &#39;02-11-1847&#39;, &#39;age&#39;: 176}, {&#39;id&#39;: 2, &#39;name&#39;: &#39;Nikola Tesla&#39;, &#39;uid&#39;: &#39;niko&#39;, &#39;dob&#39;: &#39;03-17-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 3, &#39;name&#39;: &#39;Alexander Graham Bell&#39;, &#39;uid&#39;: &#39;lex&#39;, &#39;dob&#39;: &#39;03-17-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 4, &#39;name&#39;: &#39;Eli Whitney&#39;, &#39;uid&#39;: &#39;whit&#39;, &#39;dob&#39;: &#39;03-17-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 5, &#39;name&#39;: &#39;Indiana Jones&#39;, &#39;uid&#39;: &#39;indi&#39;, &#39;dob&#39;: &#39;10-21-1920&#39;, &#39;age&#39;: 102}, {&#39;id&#39;: 6, &#39;name&#39;: &#39;Marion Ravenwood&#39;, &#39;uid&#39;: &#39;raven&#39;, &#39;dob&#39;: &#39;10-21-1921&#39;, &#39;age&#39;: 101}, {&#39;id&#39;: 7, &#39;name&#39;: &#39;Khalid farah&#39;, &#39;uid&#39;: &#39;kkk&#39;, &#39;dob&#39;: &#39;07-07-2006&#39;, &#39;age&#39;: 16}] . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | Change blog to your own database. | Add additional CRUD Add Update functionality to this blog. | Add Delete functionality to this blog. | . | .",
            "url": "https://khalidfarahhh.github.io/project-1/2023/03/13/AP-unit2-4a.html",
            "relUrl": "/2023/03/13/AP-unit2-4a.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "Testcorrection",
            "content": "",
            "url": "https://khalidfarahhh.github.io/project-1/2023/03/12/testcorrection.html",
            "relUrl": "/2023/03/12/testcorrection.html",
            "date": " • Mar 12, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "Unit 2.3 Extracting Information from Data, Pandas",
            "content": "Files To Get . Save this file to your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/2023-03-09-AP-unit2-3.ipynb . Save these files into a subfolder named files in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/data.csv . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/grade.json . Save this image into a subfolder named images in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/images/table_dataframe.png . Pandas and DataFrames . In this lesson we will be exploring data analysis using Pandas. . College Board talks about ideas like Tools. &quot;the ability to process data depends on users capabilities and their tools&quot; | Combining Data. &quot;combine county data sets&quot; | Status on Data&quot;determining the artist with the greatest attendance during a particular month&quot; | Data poses challenge. &quot;the need to clean data&quot;, &quot;incomplete data&quot; | . | . From Pandas Overview -- When working with tabular data, such as data stored in spreadsheets or databases, pandas is the right tool for you. pandas will help you to explore, clean, and process your data. In pandas, a data table is called a DataFrame. | . . &#39;&#39;&#39;Pandas is used to gather data sets through its DataFrames implementation&#39;&#39;&#39; import pandas as pd . Cleaning Data . When looking at a data set, check to see what data needs to be cleaned. Examples include: . Missing Data Points | Invalid Data | Inaccurate Data | . Run the following code to see what needs to be cleaned . df = pd.read_json(&#39;files/grade.json&#39;) print(df) # What part of the data set needs to be cleaned? # From PBL learning, what is a good time to clean data? Hint, remember Garbage in, Garbage out? . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 2 578 12 2.78 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 6 145 12 2.95 7 167 10 3.90 8 235 9th Grade 3.15 9 nil 9 2.80 10 469 11 3.45 11 456 10 2.75 . Extracting Info . Take a look at some features that the Pandas library has that extracts info from the dataset . DataFrame Extract Column . print(df[[&#39;GPA&#39;]]) print() #try two columns and remove the index from print statement print(df[[&#39;Student ID&#39;,&#39;GPA&#39;]].to_string(index=False)) . GPA 0 3.57 1 4.00 2 2.78 3 3.45 4 4.75 5 3.33 6 2.95 7 3.90 8 3.15 9 2.80 10 3.45 11 2.75 Student ID GPA 123 3.57 246 4.00 578 2.78 469 3.45 324 4.75 313 3.33 145 2.95 167 3.90 235 3.15 nil 2.80 469 3.45 456 2.75 . DataFrame Sort . print(df.sort_values(by=[&#39;GPA&#39;])) print() #sort the values in reverse order print(df.sort_values(by=[&#39;GPA&#39;], descending=False)) . Student ID Year in School GPA 11 456 10 2.75 2 578 12 2.78 9 nil 9 2.80 6 145 12 2.95 8 235 9th Grade 3.15 5 313 20 3.33 3 469 11 3.45 10 469 11 3.45 0 123 12 3.57 7 167 10 3.90 1 246 10 4.00 4 324 Junior 4.75 . TypeError Traceback (most recent call last) /home/khalidfarah/vscode/project-1/_notebooks/2023-03-09-AP-unit2-3.ipynb Cell 11 in &lt;cell line: 7&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/khalidfarah/vscode/project-1/_notebooks/2023-03-09-AP-unit2-3.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; print() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/khalidfarah/vscode/project-1/_notebooks/2023-03-09-AP-unit2-3.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; #sort the values in reverse order -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/khalidfarah/vscode/project-1/_notebooks/2023-03-09-AP-unit2-3.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; print(df.sort_values(by=[&#39;GPA&#39;], descending=False)) File ~/anaconda3/lib/python3.9/site-packages/pandas/util/_decorators.py:311, in deprecate_nonkeyword_arguments.&lt;locals&gt;.decorate.&lt;locals&gt;.wrapper(*args, **kwargs) 305 if len(args) &gt; num_allow_args: 306 warnings.warn( 307 msg.format(arguments=arguments), 308 FutureWarning, 309 stacklevel=stacklevel, 310 ) --&gt; 311 return func(*args, **kwargs) TypeError: sort_values() got an unexpected keyword argument &#39;descending&#39; . DataFrame Selection or Filter . print(df[df.GPA &gt; 3.00]) . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 7 167 10 3.90 8 235 9th Grade 3.15 10 469 11 3.45 . DataFrame Selection Max and Min . print(df[df.GPA == df.GPA.max()]) print() print(df[df.GPA == df.GPA.min()]) . Student ID Year in School GPA 4 324 Junior 4.75 Student ID Year in School GPA 11 456 10 2.75 . Create your own DataFrame . Using Pandas allows you to create your own DataFrame in Python. . Python Dictionary to Pandas DataFrame . import pandas as pd #the data can be stored as a python dictionary dict = { &quot;calories&quot;: [420, 380, 390], &quot;duration&quot;: [50, 40, 45], &quot;fortnite&quot;: [30, 20,15] } #stores the data in a data frame print(&quot;-Dict_to_DF&quot;) df = pd.DataFrame(dict) print(df) print(&quot;-Dict_to_DF_labels--&quot;) #or with the index argument, you can label rows. df = pd.DataFrame(dict, index = [&quot;day1&quot;, &quot;day2&quot;, &quot;day3&quot;]) print(df) . -Dict_to_DF calories duration fortnite 0 420 50 30 1 380 40 20 2 390 45 15 -Dict_to_DF_labels-- calories duration fortnite day1 420 50 30 day2 380 40 20 day3 390 45 15 . Examine DataFrame Rows . print(&quot;-Examine Selected Rows&quot;) #use a list for multiple labels: print(df.loc[[&quot;day1&quot;, &quot;day3&quot;]]) #refer to the row index: print(&quot;--Examine Single Row--&quot;) print(df.loc[&quot;day1&quot;]) . -Examine Selected Rows calories duration fortnite day1 420 50 30 day3 390 45 15 --Examine Single Row-- calories 420 duration 50 fortnite 30 Name: day1, dtype: int64 . Pandas DataFrame Information . print(df.info()) . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Index: 3 entries, day1 to day3 Data columns (total 3 columns): # Column Non-Null Count Dtype -- -- 0 calories 3 non-null int64 1 duration 3 non-null int64 2 fortnite 3 non-null int64 dtypes: int64(3) memory usage: 204.0+ bytes None . Example of larger data set . Pandas can read CSV and many other types of files, run the following code to see more features with a larger data set . import pandas as pd #read csv and sort &#39;Duration&#39; largest to smallest df = pd.read_csv(&#39;files/data.csv&#39;).sort_values(by=[&#39;Duration&#39;], ascending=False) print(&quot;--Duration Top 10&quot;) print(df.head(10)) print(&quot;--Duration Bottom 10&quot;) print(df.tail(10)) . --Duration Top 10 Duration Pulse Maxpulse Calories 69 300 108 143 1500.2 79 270 100 131 1729.0 109 210 137 184 1860.4 60 210 108 160 1376.0 106 180 90 120 800.3 90 180 101 127 600.1 65 180 90 130 800.4 61 160 110 137 1034.4 62 160 109 135 853.0 67 150 107 130 816.0 --Duration Bottom 10 Duration Pulse Maxpulse Calories 68 20 106 136 110.4 100 20 95 112 77.7 89 20 83 107 50.3 135 20 136 156 189.0 94 20 150 171 127.4 95 20 151 168 229.4 139 20 141 162 222.4 64 20 110 130 131.4 112 15 124 139 124.2 93 15 80 100 50.5 . APIs are a Source for Writing Programs with Data . 3rd Party APIs are a great source for creating Pandas Data Frames. . Data can be fetched and resulting json can be placed into a Data Frame | Observe output, this looks very similar to a Database | . &#39;&#39;&#39;Pandas can be used to analyze data&#39;&#39;&#39; import pandas as pd import requests def fetch(): &#39;&#39;&#39;Obtain data from an endpoint&#39;&#39;&#39; url = &quot;https://flask.nighthawkcodingsociety.com/api/covid/&quot; fetch = requests.get(url) json = fetch.json() # filter data for requirement df = pd.DataFrame(json[&#39;countries_stat&#39;]) # filter endpoint for country stats print(df.loc[0:5, &#39;country_name&#39;:&#39;deaths&#39;]) # show row 0 through 5 and columns country_name through deaths fetch() . country_name cases deaths 0 USA 82,649,779 1,018,316 1 India 43,057,545 522,193 2 Brazil 30,345,654 662,663 3 France 28,244,977 145,020 4 Germany 24,109,433 134,624 5 UK 21,933,206 173,352 . Hacks . Early Seed award . Add this Blog to you own Blogging site. | Have all lecture files saved to your files directory before Tech Talk starts. Have data.csv open in vscode. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In blog add College Board practice problems for 2.3. | . The next 4 weeks, Teachers want you to improve your understanding of data. Look at the blog and others on Unit 2. Your intention is to find some things to differentiate your individual College Board project. . Create or Find your own dataset. The suggestion is to use a JSON file, integrating with your PBL project would be Amazing. . | When choosing a data set, think about the following... . Does it have a good sample size? | Is there bias in the data? | Does the data set need to be cleaned? | What is the purpose of the data set? | ... | . | Continue this Blog using Pandas extract info from that dataset (ex. max, min, mean, median, mode, etc.) . | . HACKS ANSWERS . import pandas as pd import yfinance as yf # Define the ticker symbol for Tesla ticker = &quot;TSLA&quot; # Download data from Yahoo Finance for the last quarter start_date = &quot;2022-12-01&quot; end_date = &quot;2023-03-11&quot; tesla_data = yf.download(ticker, start=start_date, end=end_date) # Display the maximum, minimum, median, and mean stock prices from Tesla print(&quot;Maximum stock price: &quot;, tesla_data[&quot;Close&quot;].max()) print(&quot;Minimum stock price: &quot;, tesla_data[&quot;Close&quot;].min()) print(&quot;Median stock price: &quot;, tesla_data[&quot;Close&quot;].median()) print(&quot;Mean stock price: &quot;, tesla_data[&quot;Close&quot;].mean()) # Display all Tesla stock data from the last quarter print(tesla_data) . [*********************100%***********************] 1 of 1 completed Maximum stock price: 214.24000549316406 Minimum stock price: 108.0999984741211 Median stock price: 173.3300018310547 Mean stock price: 164.6083822811351 Open High Low Close Adj Close Date 2022-12-01 197.080002 198.919998 191.800003 194.699997 194.699997 2022-12-02 191.779999 196.250000 191.110001 194.860001 194.860001 2022-12-05 189.440002 191.270004 180.550003 182.449997 182.449997 2022-12-06 181.220001 183.649994 175.330002 179.820007 179.820007 2022-12-07 175.029999 179.380005 172.220001 174.039993 174.039993 ... ... ... ... ... ... 2023-03-06 198.539993 198.600006 192.300003 193.809998 193.809998 2023-03-07 191.380005 194.199997 186.100006 187.710007 187.710007 2023-03-08 185.039993 186.500000 180.000000 182.000000 182.000000 2023-03-09 180.250000 185.179993 172.509995 172.919998 172.919998 2023-03-10 175.130005 178.289993 168.440002 173.440002 173.440002 Volume Date 2022-12-01 80046200 2022-12-02 73645900 2022-12-05 93122700 2022-12-06 92150800 2022-12-07 84213300 ... ... 2023-03-06 128100100 2023-03-07 148125800 2023-03-08 151897800 2023-03-09 170023800 2023-03-10 191007900 [68 rows x 6 columns] . Titanic Data . Look at a sample of data. . import seaborn as sns # Load the titanic dataset titanic_data = sns.load_dataset(&#39;titanic&#39;) print(&quot;Titanic Data&quot;) print(titanic_data.columns) # titanic data set print(titanic_data[[&#39;survived&#39;,&#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;class&#39;, &#39;fare&#39;, &#39;embark_town&#39;]]) # look at selected columns . Titanic Data Index([&#39;survived&#39;, &#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;fare&#39;, &#39;embarked&#39;, &#39;class&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;deck&#39;, &#39;embark_town&#39;, &#39;alive&#39;, &#39;alone&#39;], dtype=&#39;object&#39;) survived pclass sex age sibsp parch class fare 0 0 3 male 22.0 1 0 Third 7.2500 1 1 1 female 38.0 1 0 First 71.2833 2 1 3 female 26.0 0 0 Third 7.9250 3 1 1 female 35.0 1 0 First 53.1000 4 0 3 male 35.0 0 0 Third 8.0500 .. ... ... ... ... ... ... ... ... 886 0 2 male 27.0 0 0 Second 13.0000 887 1 1 female 19.0 0 0 First 30.0000 888 0 3 female NaN 1 2 Third 23.4500 889 1 1 male 26.0 0 0 First 30.0000 890 0 3 male 32.0 0 0 Third 7.7500 embark_town 0 Southampton 1 Cherbourg 2 Southampton 3 Southampton 4 Southampton .. ... 886 Southampton 887 Southampton 888 Southampton 889 Cherbourg 890 Queenstown [891 rows x 9 columns] . Use Pandas to clean the data. Most analysis, like Machine Learning or even Pandas in general like data to be in standardized format. This is called &#39;Training&#39; or &#39;Cleaning&#39; data. . # Preprocess the data from sklearn.preprocessing import OneHotEncoder td = titanic_data td.drop([&#39;alive&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;class&#39;, &#39;embark_town&#39;, &#39;deck&#39;], axis=1, inplace=True) td.dropna(inplace=True) td[&#39;sex&#39;] = td[&#39;sex&#39;].apply(lambda x: 1 if x == &#39;male&#39; else 0) td[&#39;alone&#39;] = td[&#39;alone&#39;].apply(lambda x: 1 if x == True else 0) # Encode categorical variables enc = OneHotEncoder(handle_unknown=&#39;ignore&#39;) enc.fit(td[[&#39;embarked&#39;]]) onehot = enc.transform(td[[&#39;embarked&#39;]]).toarray() cols = [&#39;embarked_&#39; + val for val in enc.categories_[0]] td[cols] = pd.DataFrame(onehot) td.drop([&#39;embarked&#39;], axis=1, inplace=True) td.dropna(inplace=True) print(td) . survived pclass sex age sibsp parch fare alone embarked_C 0 0 3 1 22.0 1 0 7.2500 0 0.0 1 1 1 0 38.0 1 0 71.2833 0 1.0 2 1 3 0 26.0 0 0 7.9250 1 0.0 3 1 1 0 35.0 1 0 53.1000 0 0.0 4 0 3 1 35.0 0 0 8.0500 1 0.0 .. ... ... ... ... ... ... ... ... ... 705 0 2 1 39.0 0 0 26.0000 1 0.0 706 1 2 0 45.0 0 0 13.5000 1 0.0 707 1 1 1 42.0 0 0 26.2875 1 0.0 708 1 1 0 22.0 0 0 151.5500 1 0.0 710 1 1 0 24.0 0 0 49.5042 1 1.0 embarked_Q embarked_S 0 0.0 1.0 1 0.0 0.0 2 0.0 1.0 3 0.0 1.0 4 0.0 1.0 .. ... ... 705 0.0 1.0 706 0.0 1.0 707 1.0 0.0 708 0.0 1.0 710 0.0 0.0 [564 rows x 11 columns] . The result of &#39;Training&#39; data is making it easier to analyze or make conclusions. In looking at the Titanic, as you clean you would probably want to make assumptions on likely chance of survival. . This would involve analyzing various factors (such as age, gender, class, etc.) that may have affected a person&#39;s chances of survival, and using that information to make predictions about whether an individual would have survived or not. . Data description:- Survival - Survival (0 = No; 1 = Yes). Not included in test.csv file. - Pclass - Passenger Class (1 = 1st; 2 = 2nd; 3 = 3rd) . Name - Name | Sex - Sex | Age - Age | Sibsp - Number of Siblings/Spouses Aboard | Parch - Number of Parents/Children Aboard | Ticket - Ticket Number | Fare - Passenger Fare | Cabin - Cabin | Embarked - Port of Embarkation (C = Cherbourg; Q = Queenstown; S = Southampton) | . | Perished Mean/Average . | . print(titanic_data.query(&quot;survived == 0&quot;).mean()) . survived 0.000000 pclass 2.464072 sex 0.844311 age 31.073353 sibsp 0.562874 parch 0.398204 fare 24.835902 alone 0.616766 embarked_C 0.185629 embarked_Q 0.038922 embarked_S 0.775449 dtype: float64 . Survived Mean/Average | . print(td.query(&quot;survived == 1&quot;).mean()) . survived 1.000000 pclass 1.878261 sex 0.326087 age 28.481522 sibsp 0.504348 parch 0.508696 fare 50.188806 alone 0.456522 embarked_C 0.152174 embarked_Q 0.034783 embarked_S 0.813043 dtype: float64 . Survived Max and Min Stats . print(td.query(&quot;survived == 1&quot;).max()) print(td.query(&quot;survived == 1&quot;).min()) . survived 1.0000 pclass 3.0000 sex 1.0000 age 80.0000 sibsp 4.0000 parch 5.0000 fare 512.3292 alone 1.0000 embarked_C 1.0000 embarked_Q 1.0000 embarked_S 1.0000 dtype: float64 survived 1.00 pclass 1.00 sex 0.00 age 0.75 sibsp 0.00 parch 0.00 fare 0.00 alone 0.00 embarked_C 0.00 embarked_Q 0.00 embarked_S 0.00 dtype: float64 . Machine Learning Visit Tutorials Point . Scikit-learn (Sklearn) is the most useful and robust library for machine learning in Python. It provides a selection of efficient tools for machine learning and statistical modeling including classification, regression, clustering and dimensionality reduction via a consistence interface in Python. . Description from ChatGPT. The Titanic dataset is a popular dataset for data analysis and machine learning. In the context of machine learning, accuracy refers to the percentage of correctly classified instances in a set of predictions. In this case, the testing data is a subset of the original Titanic dataset that the decision tree model has not seen during training......After training the decision tree model on the training data, we can evaluate its performance on the testing data by making predictions on the testing data and comparing them to the actual outcomes. The accuracy of the decision tree classifier on the testing data tells us how well the model generalizes to new data that it hasn&#39;t seen before......For example, if the accuracy of the decision tree classifier on the testing data is 0.8 (or 80%), this means that 80% of the predictions made by the model on the testing data were correct....Chance of survival could be done using various machine learning techniques, including decision trees, logistic regression, or support vector machines, among others. . | Code Below prepares data for further analysis and provides an Accuracy. IMO, you would insert a new passenger and predict survival. Datasets could be used on various factors like prediction if a player will hit a Home Run, or a Stock will go up or down. . Decision Trees, prediction by a piecewise constant approximation. | Logistic Regression, the probabilities describing the possible outcomes. | . | . from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeClassifier from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score # Split arrays or matrices into random train and test subsets. X = td.drop(&#39;survived&#39;, axis=1) y = td[&#39;survived&#39;] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # Train a decision tree classifier dt = DecisionTreeClassifier() dt.fit(X_train, y_train) # Test the model y_pred = dt.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;DecisionTreeClassifier Accuracy:&#39;, accuracy) # Train a logistic regression model logreg = LogisticRegression() logreg.fit(X_train, y_train) # Test the model y_pred = logreg.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;LogisticRegression Accuracy:&#39;, accuracy) . DecisionTreeClassifier Accuracy: 0.7705882352941177 LogisticRegression Accuracy: 0.788235294117647 . /Users/johnmortensen/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1): STOP: TOTAL NO. of ITERATIONS REACHED LIMIT. Increase the number of iterations (max_iter) or scale the data as shown in: https://scikit-learn.org/stable/modules/preprocessing.html Please also refer to the documentation for alternative solver options: https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression n_iter_i = _check_optimize_result( .",
            "url": "https://khalidfarahhh.github.io/project-1/2023/03/09/AP-unit2-3.html",
            "relUrl": "/2023/03/09/AP-unit2-3.html",
            "date": " • Mar 9, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "Unit 2.2 Data Compression, Images",
            "content": "Enumerate &quot;Data&quot; Big Idea from College Board . Some of the big ideas and vocab that you observe, talk about it with a partner ... . &quot;Data compression is the reduction of the number of bits needed to represent data&quot; | &quot;Data compression is used to save transmission time and storage space.&quot; | &quot;lossy data can reduce data but the original data is not recovered&quot; | &quot;lossless data lets you restore and recover&quot; | . The Image Lab Project contains a plethora of College Board Unit 2 data concepts. Working with Images provides many opportunities for compression and analyzing size. . Image Files and Size . Here are some Images Files. Download these files, load them into images directory under _notebooks in your Blog. . Clouds Impression | Lassen Volcano | Green Square | . Describe some of the meta data and considerations when managing Image files. Describe how these relate to Data Compression ... . File Type, PNG and JPG are two types used in this lab | Size, height and width, number of pixels | Visual perception, lossy compression | . Displaying images in Python Jupyter notebook . Python Libraries and Concepts used for Jupyter and Files/Directories . IPython . Support visualization of data in Jupyter notebooks. Visualization is specific to View, for the web visualization needs to be converted to HTML. . pathlib . File paths are different on Windows versus Mac and Linux. This can cause problems in a project as you work and deploy on different Operating Systems (OS&#39;s), pathlib is a solution to this problem. . What are commands you use in terminal to access files? | What are the command you use in Windows terminal to access files? | What are some of the major differences? | . Provide what you observed, struggled with, or leaned while playing with this code. . Why is path a big deal when working with images? | How does the meta data source and label relate to Unit 5 topics? | Look up IPython, describe why this is interesting in Jupyter Notebooks for both Pandas and Images? | . from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # print parameter supplied image green_square = image_data(images=[{&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}]) image_display(green_square) # display default images from image_data() default_images = image_data() image_display(default_images) . Reading and Encoding Images (2 implementations follow) . PIL (Python Image Library) . Pillow or PIL provides the ability to work with images in Python. Geeks for Geeks shows some ideas on working with images. . base64 . Image formats (JPG, PNG) are often called *Binary File formats, it is difficult to pass these over HTTP. Thus, base64 converts binary encoded data (8-bit, ASCII/Unicode) into a text encoded scheme (24 bits, 6-bit Base64 digits). Thus base64 is used to transport and embed binary images into textual assets such as HTML and CSS.- How is Base64 similar or different to Binary and Hexadecimal? . Translate first 3 letters of your name to Base64. | . numpy . Numpy is described as &quot;The fundamental package for scientific computing with Python&quot;. In the Image Lab, a Numpy array is created from the image data in order to simplify access and change to the RGB values of the pixels, converting pixels to grey scale. . io, BytesIO . Input and Output (I/O) is a fundamental of all Computer Programming. Input/output (I/O) buffering is a technique used to optimize I/O operations. In large quantities of data, how many frames of input the server currently has queued is the buffer. In this example, there is a very large picture that lags. . Where have you been a consumer of buffering? | From your consumer experience, what effects have you experienced from buffering? | How do these effects apply to images? | . Data Structures, Imperative Programming Style, and working with Images . Introduction to creating meta data and manipulating images. Look at each procedure and explain the the purpose and results of this program. Add any insights or challenges as you explored this program. . Does this code seem like a series of steps are being performed? | Describe Grey Scale algorithm in English or Pseudo code? | Describe scale image? What is before and after on pixels in three images? | Is scale image a type of compression? If so, line it up with College Board terms described? | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_grey(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;gray_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average, average, average, pixel[3])) # PNG format else: image[&#39;gray_data&#39;].append((average, average, average)) # end for loop for pixels img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print() . - meta data -- Green Square Internet PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- original image -- . grey image - . - meta data -- Clouds Impression Peter Carolin PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- original image -- . grey image - . - meta data -- Lassen Volcano Peter Carolin JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- original image -- . grey image - . . Data Structures and OOP . Most data structures classes require Object Oriented Programming (OOP). Since this class is lined up with a College Course, OOP will be talked about often. Functionality in remainder of this Blog is the same as the prior implementation. Highlight some of the key difference you see between imperative and oop styles. . Read imperative and object-oriented programming on Wikipedia | Consider how data is organized in two examples, in relations to procedures | Look at Parameters in Imperative and Self in OOP | . Additionally, review all the imports in these three demos. Create a definition of their purpose, specifically these ... . PIL | numpy | base64 | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np class Image_Data: def __init__(self, source, label, file, path, baseWidth=320): self._source = source # variables with self prefix become part of the object, self._label = label self._file = file self._filename = path / file # file with path self._baseWidth = baseWidth # Open image and scale to needs self._img = pilImage.open(self._filename) self._format = self._img.format self._mode = self._img.mode self._originalSize = self.img.size self.scale_image() self._html = self.image_to_html(self._img) self._html_grey = self.image_to_html_grey() @property def source(self): return self._source @property def label(self): return self._label @property def file(self): return self._file @property def filename(self): return self._filename @property def img(self): return self._img @property def format(self): return self._format @property def mode(self): return self._mode @property def originalSize(self): return self._originalSize @property def size(self): return self._img.size @property def html(self): return self._html @property def html_grey(self): return self._html_grey # Large image scaled to baseWidth of 320 def scale_image(self): scalePercent = (self._baseWidth/float(self._img.size[0])) scaleHeight = int((float(self._img.size[1])*float(scalePercent))) scale = (self._baseWidth, scaleHeight) self._img = self._img.resize(scale) # PIL image converted to base64 def image_to_html(self, img): with BytesIO() as buffer: img.save(buffer, self._format) return &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % base64.b64encode(buffer.getvalue()).decode() # Create Grey Scale Base64 representation of Image def image_to_html_grey(self): img_grey = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array grey_data = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in numpy: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: grey_data.append((average, average, average, pixel[3])) # PNG format else: grey_data.append((average, average, average)) # end for loop for pixels img_grey.putdata(grey_data) return self.image_to_html(img_grey) # prepares a series of images, provides expectation for required contents def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] return path, images # turns data into objects def image_objects(): id_Objects = [] path, images = image_data() for image in images: id_Objects.append(Image_Data(source=image[&#39;source&#39;], label=image[&#39;label&#39;], file=image[&#39;file&#39;], path=path, )) return id_Objects # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: for ido in image_objects(): # ido is an Imaged Data Object print(&quot;- meta data --&quot;) print(ido.label) print(ido.source) print(ido.file) print(ido.format) print(ido.mode) print(&quot;Original size: &quot;, ido.originalSize) print(&quot;Scaled size: &quot;, ido.size) print(&quot;-- scaled image --&quot;) display(HTML(ido.html)) print(&quot; grey image &quot;) display(HTML(ido.html_grey)) print() . - meta data -- Green Square Internet green-square-16.png PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- scaled image -- . grey image . - meta data -- Clouds Impression Peter Carolin clouds-impression.png PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- scaled image -- . grey image . - meta data -- Lassen Volcano Peter Carolin lassen-volcano.jpg JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- scaled image -- . grey image . . Hacks ANSWERS . import numpy as np from PIL import Image # Load image img = Image.open(&quot;images/smile.png&quot;) # Convert image to NumPy array img_array = np.array(img) # Create a copy of the array to manipulate red_array = img_array.copy() # Set green and blue channels to zero red_array[:,:,1] = 0 red_array[:,:,2] = 0 # Multiply red channel by scalar value red_array[:,:,0] = red_array[:,:,0] * 1.5 # Convert NumPy array back to image red_img = Image.fromarray(np.uint8(red_array)) # Display the image red_img.show() . from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Clipart Library&quot;, &#39;label&#39;: &quot;Smiley Face&quot;, &#39;file&#39;: &quot;smile.png&quot;}, ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Testing/displays images if __name__ == &quot;__main__&quot;: # print parameter supplied image smiley_face = image_data(images=[{&#39;source&#39;: &quot;Clipart Library&quot;, &#39;label&#39;: &quot;Smiley Face&quot;, &#39;file&#39;: &quot;smile.png&quot;}]) image_display(smiley_face) . Hacks . Early Seed award . Add this Blog to you own Blogging site. | In the Blog add a Happy Face image. | Have Happy Face Image open when Tech Talk starts, running on localhost. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . In the Blog add notes and observations on each code cell that request an answer. | In blog add College Board practice problems for 2.3 | Choose 2 images, one that will more likely result in lossy data compression and one that is more likely to result in lossless data compression. Explain. | . Project Addition . If your project has images in it, try to implement an image change that has a purpose. (Ex. An item that has been sold out could become gray scale) | . Pick a programming paradigm and solve some of the following ... . Numpy, manipulating pixels. As opposed to Grey Scale treatment, pick a couple of other types like red scale, green scale, or blue scale. We want you to be manipulating pixels in the image. | Binary and Hexadecimal reports. Convert and produce pixels in binary and Hexadecimal and display. | Compression and Sizing of images. Look for insights into compression Lossy and Lossless. Look at PIL library and see if there are other things that can be done. | There are many effects you can do as well with PIL. Blur the image or write Meta Data on screen, aka Title, Author and Image size. | .",
            "url": "https://khalidfarahhh.github.io/project-1/2023/03/07/AP-unit2-2.html",
            "relUrl": "/2023/03/07/AP-unit2-2.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "Model and Object-Oriented Programming",
            "content": "Class and Object Terms . The foundations of Object-Oriented Programming is defining a Class . In Object-Oriented Programming (OOP), a class is a blueprint for creating an Object. (a data structure). An Object is used like many other Python variables. | A Class has ... a collection of data, these are called Attributes and in Python are pre-fixed using the keyword self | a collection of Functions/Procedures. These are called *Methods when they exist inside a Class definition. | . | An Object is created from the Class/Template. Characteristics of objects ... an Object is an Instance of the Class/Template | there can be many Objects created from the same Class | each Object contains its own Instance Data | the data is setup by the Constructor, this is the &quot;init&quot; method in a Python class | all methods in the Class/Template become part of the Object, methods are accessed using dot notation (object.method()) | . | A Python Class allow for the definition of @ decorators, these allow access to instance data without the use of functions ... @property decorator (aka getter). This enables developers to reference/get instance data in a shorthand fashion (object.name versus object.get_name()) | @name.setter decorator (aka setter). This enables developers to update/set instance data in a shorthand fashion (object.name = &quot;John&quot; versus object.set_name(&quot;John&quot;)) | observe all instance data (self._name, self.email ...) are prefixed with &quot;&quot;, this convention allows setters and getters to work with more natural variable name (name, email ...) | . | . Class and Object Code . # Werkzeug is a collection of libraries that can be used to create a WSGI (Web Server Gateway Interface) # A gateway in necessary as a web server cannot communicate directly with Python. # In this case, imports are focused on generating hash code to protect passwords. from werkzeug.security import generate_password_hash, check_password_hash import json # Define a User Class/Template # -- A User represents the data we want to manage class User: # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using str(object) in human readable form, uses getter def __str__(self): return f&#39;name: &quot;{self.name}&quot;, id: &quot;{self.uid}&quot;, psw: &quot;{self.password}&quot;&#39; # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;Person(name={self._name}, uid={self._uid}, password={self._password})&#39; # tester method to print users def tester(users, uid, psw): result = None for user in users: # test for match in database if user.uid == uid and user.is_password(psw): # check for match print(&quot;* &quot;, end=&quot;&quot;) result = user # print using __str__ method print(str(user)) return result # place tester code inside of special if! This allows include without tester running if __name__ == &quot;__main__&quot;: # define user objects u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;) u2 = User(name=&#39;Nicholas Tesla&#39;, uid=&#39;nick&#39;, password=&#39;123nick&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;eli&#39;, password=&#39;123eli&#39;) u5 = User(name=&#39;Hedy Lemarr&#39;, uid=&#39;hedy&#39;, password=&#39;123hedy&#39;) # put user objects in list for convenience users = [u1, u2, u3, u4, u5] # Find user print(&quot;Test 1, find user 3&quot;) u = tester(users, u3.uid, &quot;123lex&quot;) # Change user print(&quot;Test 2, change user 3&quot;) u.name = &quot;John Mortensen&quot; u.uid = &quot;jm1021&quot; u.set_password(&quot;123qwerty&quot;) u = tester(users, u.uid, &quot;123qwerty&quot;) # Make dictionary &#39;&#39;&#39; The __dict__ in Python represents a dictionary or any mapping object that is used to store the attributes of the object. Every object in Python has an attribute that is denoted by __dict__. Use the json.dumps() method to convert the list of Users to a JSON string. &#39;&#39;&#39; print(&quot;Test 3, make a dictionary&quot;) json_string = json.dumps([user.__dict__ for user in users]) print(json_string) print(&quot;Test 4, make a dictionary&quot;) json_string = json.dumps([vars(user) for user in users]) print(json_string) . Test 1, find user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$sYS...&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$VNt...&#34; * name: &#34;Alexander Graham Bell&#34;, id: &#34;lex&#34;, psw: &#34;sha256$qWN...&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$Gga...&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$YBO...&#34; Test 2, change user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$sYS...&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$VNt...&#34; * name: &#34;John Mortensen&#34;, id: &#34;jm1021&#34;, psw: &#34;sha256$eCU...&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$Gga...&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$YBO...&#34; Test 3, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$sYSuv5gDC28T89VR$f352ea4d8c801bcc3ed612ebda20d957d901dcad23a9e102c2ec42e84227e3c3&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$VNtXuL0zze5IPPBU$432da08ed76cdfb8476812daeef7b75f5892bf400b7913128528457bca472e03&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$eCUjqCCmXWjr6kVk$26c200a41b75a4f2942996538758683473b8de12492052b2a85b188f42d3d0ea&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$GgaqwEComADGNXG7$eb0a1336ab77ddad4d4dd3a4b25af74af18b6b3065df28fcb6798e6d73614e5d&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$YBOkMcyBgUp00dH3$94e04ba3985dfbf74c4b398a28ad2d8ad48e7e6b35283bc08fdbc3d5f90e912e&#34;}] Test 4, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$sYSuv5gDC28T89VR$f352ea4d8c801bcc3ed612ebda20d957d901dcad23a9e102c2ec42e84227e3c3&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$VNtXuL0zze5IPPBU$432da08ed76cdfb8476812daeef7b75f5892bf400b7913128528457bca472e03&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$eCUjqCCmXWjr6kVk$26c200a41b75a4f2942996538758683473b8de12492052b2a85b188f42d3d0ea&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$GgaqwEComADGNXG7$eb0a1336ab77ddad4d4dd3a4b25af74af18b6b3065df28fcb6798e6d73614e5d&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$YBOkMcyBgUp00dH3$94e04ba3985dfbf74c4b398a28ad2d8ad48e7e6b35283bc08fdbc3d5f90e912e&#34;}] . Hacks . Add new attributes/variables to the Class. Make class specific to your CPT work. . Add classOf attribute to define year of graduation Add setter and getter for classOf | . | Add dob attribute to define date of birth This will require investigation into Python datetime objects as shown in example code below | Add setter and getter for dob | . | Add instance variable for age, make sure if dob changes age changes Add getter for age, but don&#39;t add/allow setter for age | . | Update and format tester function to work with changes | . Start a class design for each of your own Full Stack CPT sections of your project . Use new code cell in this notebook | Define init and self attributes | Define setters and getters | Make a tester | . Start Code for Hacks . from datetime import date def calculate_age(born): today = date.today() return today.year - born.year - ((today.month, today.day) &lt; (born.month, born.day)) dob = date(1904, 7, 7) age = calculate_age(dob) print(age) . 118 . from werkzeug.security import generate_password_hash, check_password_hash from datetime import date import json class User: def __init__(self, name, phonenumber, password, dob): self._name = name # variables with self prefix become part of the object, self._phonenumber = phonenumber self.set_password(password) self._dob = dob @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts phonenumber from object @property def phonenumber(self): return self._phonenumber # a setter function, allows name to be updated after initial object creation @phonenumber.setter def phonenumber(self, phonenumber): self._phonenumber = phonenumber # check if uid parameter matches user id in object, return boolean def is_email(self, email): return self._email == email # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): self._dob = dob # age is calculated and returned each time it is accessed @property def age(self): today = date.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) @property def classOf(self): return self._dob.year + 18 # dictionary is customized, removing password for security purposes @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;phonenumber&quot; : self.phonenumber, &quot;dob&quot; : self.dob, &quot;age&quot; : self.age, &quot;classOf&quot; : self.classOf } return dict # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.dictionary) # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;User(name={self._name}, phonenumber={self._phonenumber}, password={self._password},dob={self._dob})&#39; if __name__ == &quot;__main__&quot;: u1 = User(name=&#39;Thomas Edison&#39;, phonenumber=&#39;9999999999&#39;, password=&#39;123toby&#39;, dob=date(1847, 2, 11)) print(&quot;JSON ready string: n&quot;, u1, &quot; n&quot;) print(&quot;Raw Variables of object: n&quot;, vars(u1), &quot; n&quot;) print(&quot;Raw Attributes and Methods of object: n&quot;, dir(u1), &quot; n&quot;) print(&quot;Representation to Re-Create the object: n&quot;, repr(u1), &quot; n&quot;) user1 = User(name=&#39;Trent Cardall&#39;, phonenumber=&#39;9999999999&#39;, password=&#39;Trent11921&#39;, dob=date(2005, 3, 9)) user2 = User(name=&#39;Samarth Kalanke&#39;, phonenumber=&#39;9999999999&#39;, password=&#39;samarth909123&#39;, dob=date(2006, 10, 19)) user3 = User(name=&#39;Eli Gilmour&#39;, phonenumber=&#39;9999999999&#39;, password=&#39;Elig10291&#39;, dob=date(2006, 8, 8)) user4 = User(name=&#39;Khalid Farah&#39;, phonenumber=&#39;9999999999&#39;, password=&#39;Khalidlovescompsci112&#39;, dob=date(2006, 7, 7)) def info(person): print(&quot; t&quot; + &quot;name: &quot; + person.name) print(&quot; t&quot; + &quot;phonenumber: &quot; + person.phonenumber) print(&quot; t&quot; + &quot;password: &quot; + person._password) print(&quot; t&quot; + &quot;age: &quot; + str(person.age)) print(&quot; t&quot; + &quot;Class of &quot; + str(person.classOf) + &quot; n&quot;) print(&quot;People who like fortnite ):&quot; + &quot; n&quot;) info(user1) info(user2) info(user3) info(user4) . JSON ready string: {&#34;name&#34;: &#34;Thomas Edison&#34;, &#34;phonenumber&#34;: &#34;9999999999&#34;, &#34;dob&#34;: &#34;02-11-1847&#34;, &#34;age&#34;: 175, &#34;classOf&#34;: 1865} Raw Variables of object: {&#39;_name&#39;: &#39;Thomas Edison&#39;, &#39;_phonenumber&#39;: &#39;9999999999&#39;, &#39;_password&#39;: &#39;sha256$lbkh9QAS3xWhPF6I$5e1684eaeb313d387b51efb8ff472e3ac4496b476cd8e8c8d4a9c49ac30e38aa&#39;, &#39;_dob&#39;: datetime.date(1847, 2, 11)} Raw Attributes and Methods of object: [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;_dob&#39;, &#39;_name&#39;, &#39;_password&#39;, &#39;_phonenumber&#39;, &#39;age&#39;, &#39;classOf&#39;, &#39;dictionary&#39;, &#39;dob&#39;, &#39;is_email&#39;, &#39;is_password&#39;, &#39;name&#39;, &#39;phonenumber&#39;, &#39;set_password&#39;] Representation to Re-Create the object: User(name=Thomas Edison, phonenumber=9999999999, password=sha256$lbkh9QAS3xWhPF6I$5e1684eaeb313d387b51efb8ff472e3ac4496b476cd8e8c8d4a9c49ac30e38aa,dob=1847-02-11) People who like fortnite ): name: Trent Cardall phonenumber: 9999999999 password: sha256$IFUU7IN7JuH8LaVd$b7a669a74542176681f373d0e323ff43b8338a1fcf698d0136b5e4e1ea1113fd age: 17 Class of 2023 name: Samarth Kalanke phonenumber: 9999999999 password: sha256$c0YG9TNRQNwlTjpz$351d2206985a199ee9b3aa228258a50684ca46ded53529d0dc1fef20a5f9d29e age: 16 Class of 2024 name: Eli Gilmour phonenumber: 9999999999 password: sha256$kaYUFC8wTpLu4O8o$a6d8b5170545fd5334c9b991ace485fb1043bf23a18f4f098269e934a34bfc2f age: 16 Class of 2024 name: Khalid Farah phonenumber: 9999999999 password: sha256$meT8TpS6rZ7KGc5x$2e3ae1336ba07e59ea237922ffb6cb5fe963c1e2e27b8a91f9db468c84bb3091 age: 16 Class of 2024 .",
            "url": "https://khalidfarahhh.github.io/project-1/2023/01/10/PBL-model.html",
            "relUrl": "/2023/01/10/PBL-model.html",
            "date": " • Jan 10, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "Lesson 17-18 hacks",
            "content": "vocab . Problem: a description of a task that may or may not be able to be solved through the use of an algorithm | Instance of a problem: includes a specific input | Decision problem: Problem with a binary answer (yes or no) | Optimization problem: Problem with the objective of finding the BEST solution amongst many possibilities to solve a problem | Decidable Problems: problems for which algorithms can be written to solve/produce a correct output for all possible inputs | Undecidable Problems: problems for which no algorithms can be built that can provide a correct yes or no answer | Some undecidable problems can have algorithms to solve some parts, but not all parts of the problem | 1 Step Problem: When an integer is multiplied by a value(Linear) | 2 Step Problem: When an integer is raised to a power of n(Exponential) | 3 Step Problem: When an integer is multiplied by a value, and then raised to a power of 2(Square) | 4 Step Problem: A factorial problem | Constant Time: Will always take the same number of steps, no matter how large input it | Linear Time: The number of steps increases in direct proportion to the input size | Quadratic Time: The number of steps increase in proportion to the input size squared | Exponential Time: The number of steps increase in proportion to the input size squared | Polynomial time: any run time that does not increase faster than n^k which includes constant time, quadratic time, and other higher degree polynomials | Superpolynomial time: any run time that does increase faster than n^k which includes Exponential time and factorial time | Reasonable Time: Algorithms with a polynomial efficiency or lower (constant, linear, square, cube, etc.) | Unreasonable Time: Algorithms with exponential or factorial efficiencies Notes . Algorithms with a polynomial efficiency or slower (constant, linear, square, cube, etc.) are said to run in a reasonable amount of time. Algorithms with exponential or factorial efficiencies are examples of algorithms that run in an unreasonable amount of time. Some problems can not be solved in a reasonable amount of time, so when this is the case, an approximate solution is found. . | . Hack 1 . A decidable problem is a problem for which an algorithm or a procedure can be written that always terminates after a finite number of steps and correctly answers whether a given input to the problem is a valid solution or not. An example of a decidable problem is determining whether a given string of text is a palindrome (a word or phrase that reads the same forwards and backwards). An undecidable problem is a problem for which it is impossible to design an algorithm or a procedure that always terminates and correctly answers whether a given input is a valid solution or not. An example of an undecidable problem is the Halting problem, which is the problem of determining, given a description of an arbitrary computer program and an input, whether the program will finish running or continue to run forever. . Hack 2 . Answer = None of the above. A. 2 x 6 x 8 is a mathematical expression that evaluates to 96, but it is not an algorithm. . B. 4^5 is a mathematical expression that evaluates to 1024, but it is not an algorithm. . C. (3 x 8)^2 is a mathematical expression that evaluates to 144, but it is not an algorithm. . Hack 3 . function peakFinder(array) { let start = 0; let end = array.length - 1; while (start &lt;= end) { let mid = Math.floor((start + end) / 2); if (array[mid] &gt; array[mid-1] &amp;&amp; array[mid] &gt; array[mid+1]) { return The ${mid} indexed number, ${array[mid]} is a peak; } else if (array[mid] &lt; array[mid-1]) { end = mid - 1; } else { start = mid + 1; } } return “No peak element found”; } . Hack 4 . def merge_sort(data): if len(data) &lt;= 1: return data . mid = len(data) // 2 left_data = merge_sort(data[:mid]) right_data = merge_sort(data[mid:]) . left_index = 0 right_index = 0 sorted_data = [] . while left_index &lt; len(left_data) and right_index &lt; len(right_data): if left_data[left_index] &lt; right_data[right_index]: sorted_data.append(left_data[left_index]) left_index += 1 else: sorted_data.append(right_data[right_index]) right_index += 1 . sorted_data += left_data[left_index:] sorted_data += right_data[right_index:] . return sorted_data . if name == ‘main’: data = [9, 1, 7, 6, 2, 8, 5, 3, 4, 0] sorted_data = merge_sort(data) print(sorted_data) . Hack 5 . def heap_permutation(data, n): if n == 1: print(data) return . for i in range(n): heap_permutation(data, n - 1) if n % 2 == 0: data[i], data[n-1] = data[n-1], data[i] else: data[0], data[n-1] = data[n-1], data[0] . if name == ‘main’: data = [1, 2, 3] heap_permutation(data, len(data)) .",
            "url": "https://khalidfarahhh.github.io/project-1/fastpages/markdown/2022/12/15/lesson1718hacks.html",
            "relUrl": "/fastpages/markdown/2022/12/15/lesson1718hacks.html",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Lesson 16 hacks",
            "content": "Answer Table Question Answer Name(First+Last) Khalid Farah 1 woo 2 raunak 3 C- To make the simulation more accurate 4 C- Imperfections on aircraft 5 C Situation considered 6 A- simulation, because it’s too dangerous to have this be an experiment 7 A- simulation, we don’t want to experiment with this because it could cause great harm on the environment 8 raunak 9 B- experiment/calculation because there is no need to simulate anything, this will only be a simple calculation of the average .",
            "url": "https://khalidfarahhh.github.io/project-1/fastpages/markdown/2022/12/15/group17hacks.html",
            "relUrl": "/fastpages/markdown/2022/12/15/group17hacks.html",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Lesson 12-13 hacks",
            "content": "3.12 Part 1 Problem 1: This problem involves parameters Qais is writing code to calculate formulas from his math class. He’s currently working on a procedure to calculate average speed, based on this formula: Average speed= . Total Time/Total Distance​ . Highlight which of these is the best procedure for calculating and displaying average speed. PROCEDURE calcAvgSpeed (distance, time) { DISPLAY (distance/time) } PROCEDURE calcAvgSpeed (distance) { DISPLAY (distance/time) } PROCEDURE calcAvgSpeed (distance, time) { DISPLAY (time/distance) } . Problem 2: Procedures with return values James Hunter is looking through his classmate’s program and sees a procedure called heightenEmotions: PROCEDURE heightenEmotions(myEmotion){ moreEnergy ← CONCAT(myEmotion, “!!!”) moreVolume ← UPPER(moreEnergy) . RETURN moreVolume } . That procedure manipulates strings using two built-in procedures, CONCAT for concatenating two strings together, and UPPER for converting a string to uppercase. . James Hunter then sees this line of code: . heightenEmotions(“im mad”) . After that line of code runs, will nothing be displayed? . True, because it does not have DISPLAY in the procedure . False . Problem 3: Procedures with return values Bubz is writing a program to calculate the carbon footprint of his activities. The procedure calcFlightFootprint calculates the pounds of carbon dioxide produced per passenger in a flight that covers a given number of miles and seats a given number of passengers. PROCEDURE calcFlightFootprint(numMiles, numPassengers) { . CO2_PER_MILE ← 53.29 . carbonPerFlight ← numMiles * CO2_PER_MILE . carbonPerPassenger ← carbonPerFlight / numPassengers . RETURN carbonPerPassenger . } . Bubz wants to use that procedure to calculate the total footprint for his two upcoming flights: LA to NY: 2,451 miles and 118 passengers NY to London: 3,442 miles and 252 passengers . Which of these code snippets successfully calculates and stores her total footprint? Highlight 2 answers. . totalFootprint ← calcFlightFootprint(2451, 118) + calcFlightFootprint(3442, 252) . totalFootprint ← calcFlightFootprint(2451, 118 + 3442, 252) . totalFootprint ← calcFlightFootprint((2451, 118) + (3442, 252)) . laNyCarbon ← calcFlightFootprint(2451, 118) nyLondonCarbon ← calcFlightFootprint(3442, 252) totalFootprint ← laNyCarbon + nyLondonCarbon . 3.12 Part 2 What is a? a – ? b – ? c – 9 PROCEDURE find a () { b &lt;– 9 9 a &lt;– b c Print (a) } . Answer: a is 9 . What is the cost? cost ⟵ 173 tax - 10% PROCEDURE applytax (cost, percentDiscounted){ . temp &lt;– 100 + percentTaxed temp &lt;– temp / 100 cost &lt;– cost x temp Print(cost)} Answer: The cost $190.30 . What is the celsius value? Temperature - 103 Degrees PROCEDURE convert Fahrenheit (temperature) { Celsius &lt;– temperature - 32 Celsius &lt;– Celsius x 5/9 Print (Celsius)} . Answer: 39.4 Celsius . 3.13 Parts 1 and 2 Create a procedure that is meant to replace the top running backs yards per game in one season if the current running back has more yards per game Necessary Parameters: toprbyardspg(100), currentrbyards(1260), totalGames(12) PROCEDURE replaceTopRb(toprbyardspg(100), curerntrbyards(1260), totalgames){ If (currentRbYards(1260) &gt; toprbyardspg(100)){ toprbyardspg &lt;– currentRbYards } } Write a procedure that will allow the A+ to get to the 1, while avoiding the black boxes. . PROCEDURE getAplus(){ If (can_MoveForward): Move_Forward Else (can_MoveRight): Rotate_Right Move_Forward If (can_MoveLeft); Rotate_Left Move_forward } Which Is the Correct Way to define the Name of a Procedure? . A. PROCEDURE MYLIST B. PROCEDURE MyList C. procedure mylist . Answer: B. because procedure should be in all capitals and part of the the declared procedure should be capitalized, not all and not none. . Write A Procedure that gets the Santa to the Christmas Tree PROCEDURE SantaToTree{ count = 0 Move_Forward Rotate_Left Move_Forward( until count = 6) break Rotate_Left Move_Forward } What I have learned: I learned the basics in creating a procedure: that the name needs to be simple but make sense that you can use for and while loops and iteration to shorten the code Procedure in the code should be written in all caps like “PROCEDURE” In algorithms: there are many different algorithms to reach a certain solution you can also use for and while loops and iteration to shorten algorithms .",
            "url": "https://khalidfarahhh.github.io/project-1/fastpages/markdown/2022/12/14/hwhacksss.html",
            "relUrl": "/fastpages/markdown/2022/12/14/hwhacksss.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Leesson 14-15 hacks",
            "content": "Reflection . I learned about documentation, libraries, and APIs. Documentation is a part of the AP Exam project part and it requires explaining what and how your code works. Libraries help make your coding experience more efficient because they are pre-written and you can reference them throughout your code. I researched one library that utilizes Python: numPy, which works with arrays. | . Multiple Choice . B) a random integer between ‘a’ and ‘b’ inclusive | A) x = start, y = stop, z = step | A) random.item() does not exist | . Short Answer . Libraries are convenient because they provide procedures and prewritten code to maximize the efficiency of programmers This procedure takes a list of strings and returns who will buy the meal today import random . takes user input, puts it into a list of names names_string = input(“Give me everybody’s names, seperated by a comma.”) names = names_string.split(“,”) . num_items = len(names) . uses random to choose a random number random_choice = random.randint(0, num_items - 1) . associates random number with a name person_who_will_pay = names[random_choice] . prints name print(f”{person_who_will_pay} is going to buy the meal today!”) . Coding challenges . import random NAMES = [“Aiden”, “Brayden”, “Bradley”, “Harambe”, “Charles”, “BigChungus”, “Chad”, “Brett”, “Dorian”, “Ryan”, “Varalu”, “Rohin”, “Advay”, “SmallChungus”] rand_list = [] . def randomPeople(names, new_names): count = 1 while count &lt;= 5: number = random.randint(0, len(names) - 1) new_names.append(names[number]) count += 1 return new_names . print(randomPeople(NAMES, rand_list)) [‘Charles’, ‘BigChungus’, ‘Rohin’, ‘Dorian’, ‘Aiden’] import random score1 = 0 score2 = 0 . def greatestRoll(): score1 = random.randint(1, 6) + random.randint(1, 6) score2 = random.randint(1, 6) + random.randint(1, 6) if score1 &gt; score2: print(“Player 1 won with a score of “ + str(score1) + “ points!”) if score1 &lt; score2: print(“Player 2 won with a score of “ + str(score2) + “ points!”) if score1 == score2: print(“Both players tied with “ + str(score1) + “ points!”) . greatestRoll() Player 1 won with a score of 9 points! .",
            "url": "https://khalidfarahhh.github.io/project-1/fastpages/markdown/2022/12/14/emmachenhw.html",
            "relUrl": "/fastpages/markdown/2022/12/14/emmachenhw.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Lesson Vocab",
            "content": "Vocab . Unit 2… Binary/Data Terms | . its are the basic unit of information in computing, consisting of a single binary digit that can take on a value of 0 or 1. . Bytes are a unit of measurement for data storage, consisting of eight bits. . Hexadecimal, or hex, is a number system with base 16, often used in computing to represent binary data in a more human-readable format. . Nibbles are a unit of measurement for data, consisting of four bits. . A binary number is a number represented using only the digits 0 and 1. . An unsigned integer is a binary number that represents a non-negative whole number, without any representation of sign. . A signed integer is a binary number that represents a whole number, with a separate representation of sign (positive or negative). . A floating point number is a binary number that represents a real number, with a separate representation of the decimal point. . A Boolean is a binary data type that can take on one of two possible values, representing true or false. . ASCII is a character encoding standard that represents each letter, digit, and symbol as a unique binary number. . Unicode is a character encoding standard that represents most of the world’s written languages, including all of the characters in ASCII, as well as many additional characters. . RGB (Red-Green-Blue) is a color model used in computing to represent colors as a combination of red, green, and blue values. . Data compression is the process of reducing the amount of data required to represent a given amount of information, typically to save space or transmission time. . Lossy data compression involves discarding some of the data in order to achieve a higher level of compression. . Lossless data compression involves preserving all of the data, but encoding it in a more compact form. . Unit 3… Algorithm/Programming Terms | . A variable is a named location in a computer’s memory that is used to store a value. The value stored in a variable can be changed, and the same variable can be used to store different values at different times. . Data types are the classification of data based on their type and the operations that can be performed on them. Common data types include integers, floating-point numbers, strings, and Booleans. . A list is a collection of data items that are organized in a specific order. In Python, lists are represented using square brackets and can contain any data type, including other lists. . A 2D list is a list that contains other lists as its items. This allows for the creation of data structures that have more than one dimension, such as a grid or a table. . A dictionary is a data structure that uses keys to map to values. In Python, dictionaries are represented using curly braces and can contain any data type. . A class is a template or blueprint for creating objects in object-oriented programming. Classes define the properties and behaviors of objects, and objects are instances of a class. . An algorithm is a step-by-step procedure for solving a problem or achieving a specific goal. Algorithms are used in many different fields, including computer science, mathematics, and engineering. . A sequence is a type of control structure in which a set of instructions are executed in a specific order. . Selection is a type of control structure in which a specific set of instructions are executed based on the evaluation of a condition. . Iteration is a type of control structure in which a set of instructions are repeated until a specific condition is met. . An expression is a combination of variables, operators, and other elements that produces a value. In programming, expressions are often used in control structures to evaluate conditions. . Comparison operators are operators that are used to compare two values. In Python, the comparison operators include &lt; (less than), &gt; (greater than), == (equal to), and != (not equal to). . Boolean expressions are expressions that evaluate to either true or false. In programming, Boolean expressions are often used in control structures to determine which instructions to execute. . Selection statements are control structures that use Boolean expressions to evaluate conditions and decide which instructions to execute. In Python, the selection statement is the if statement. . Iteration statements are control structures that repeat a set of instructions until a specific condition is met. In Python, the iteration statements are the for and while loops. . A truth table is a table that shows the possible combinations of inputs and outputs for a logical operation. Truth tables are often used to evaluate the behavior of Boolean expressions. . Characters are the basic building blocks of a string. In Python, characters are represented as single quotes (e.g. ‘a’) and can be any letter, number, or symbol. . Strings are collections of characters that are used to represent text. In Python, strings are represented as double quotes (e.g. “Hello”) or single quotes (e.g. ‘Hello’). . The length of a string is the number of characters it contains. In Python, the length of a string can be found using the len() function. . Concatenation is the process of joining two or more strings together to form a new string. In Python, concatenation is performed using the + operator. . The upper() and lower() methods are used to convert a string to all uppercase or all lowercase characters . Traversing a string means to access each character in the string one by one. In Python, this can be done using a for loop and the len() function to iterate over the characters in a string. . The if, elif, and else keywords are used in Python to create conditional statements. . The if statement is used to evaluate a condition and execute a specific set of instructions if the condition is true. . The elif statement is used to evaluate additional conditions if the original if condition is false. . The else statement is used to specify a default set of instructions to execute if all other conditions are false. . Nested selection statements are if statements that are placed inside of other if statements. This allows for the creation of complex conditional statements that can evaluate multiple conditions. . The for and while loops are used in Python to repeat a set of instructions multiple times. The for loop is used to iterate over a sequence of items, such as the elements of a list. The while loop is used to repeat a set of instructions as long as a specific condition is true. . The range() function is used in Python to generate a sequence of numbers. This can be used in a for loop to specify the number of times to repeat the loop. . The break and continue keywords are used in Python to control the flow of a loop. The break keyword is used to exit a loop completely, while the continue keyword is used to skip the current iteration of the loop and continue with the next iteration. . Procedural abstraction is the process of separating the details of how a task is performed from the overall logic of the program. In Python, this is achieved using def procedures, which allow for the creation of reusable blocks of code that can be called from other parts of the program. . Parameters are variables that are used to pass information into a def procedure. When a procedure is called, the values of the parameters are specified and are used by the procedure to perform its tasks. . Return values are the values that are returned by a def procedure after it has finished executing. Return values can be used by the calling code to access the results of the procedure’s operations. .",
            "url": "https://khalidfarahhh.github.io/project-1/fastpages/markdown/2022/12/07/vocab.html",
            "relUrl": "/fastpages/markdown/2022/12/07/vocab.html",
            "date": " • Dec 7, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Homework assignment/Hacks 3.1-2",
            "content": "excercise 1 list = [1, 2, 3, 4, 5] reversed = [] for value in list: reversed = [value] + reversed print(reversed) . excercise 2 list = [1, 2, 3, 4, 5] reversed = [] for value in list: reversed = [value] + reversed print(reversed) . reflection I learned how to create a bubble sort list and learned what each command does and how to write it. Also how to create a reversed list and print. . Quiz corrections . . I got this question wrong because I thought that the position of an element in a list, starts at 1 but it starts at zero. . . [0,1,2,3,4,5,6,7,8,9] . [5,4,3,2,1] Screenshot 2022-12-07 135100 . My Notebook isn’t working so I put the code in a Markdown. . I got this question wrong because I thought that the position of an element in a list, starts at 1 but it starts at zero. .",
            "url": "https://khalidfarahhh.github.io/project-1/fastpages/markdown/2022/12/07/hwforryan.html",
            "relUrl": "/fastpages/markdown/2022/12/07/hwforryan.html",
            "date": " • Dec 7, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Homework assignment for luke",
            "content": "3.5 Binary Hacks Binary Practice Using psuedocode operators determine if the statements are true or false. The number type will be indicated in parentheses. . 90(D) = 1000(B) | A. True B. False Answer = B, number B is larger then number D . 10(D) ≠ 0110(B) | A. True B. False Answer = A, because binary D is not equal to B . 56(D) ≥ 111000(B) | A. True B. False Answer B, 56 is not equal to B . 99(D) &lt; 1110011(B) | A. True B. False Answer = A, because Binary B is larger than binary D AND Operator Value 1 Value 2 Result 1 1 1 1 0 0 0 1 0 0 0 0 OR Operator Value 1 Value 2 Result 1 1 1 1 0 1 0 1 1 0 0 0 Not operator Not Value Result Not 1 0 Not 0 0 Testing out relational operators Practice with these statements print(20 &gt; 20) # How can you change the operator to print a value of False? . x = 30 y = 20 z = 10 print(x &gt;= y + z) # How can this return true by only manipulating the operator? . 3.6 Hacks AP Prep . What is displayed by this code? | result &lt;– 75 IF result &lt; 80 { DISPLAY(“Please schedule a retake.”) } ELSE { DISPLAY(“Nice job!”) } Nice job! Display Please schedule a retake. (answer) 75 (75 is lower than 80) 2. How is an if statement different from an if-else statement. . Extra words. An if statement will only go through a process if a condition is met. An if-else statement will go through code no matter the conditions. (answer) They are the exact same. An if statement will go through the entire code segment every single time and the if-else statement is always used in an algorithm, no matter the conditions. (statement must be made in order to go through the code) 3. What would be most appropriate for this situation? Ben wants to check his bank account. If his car fuel is full, he will go to the bank. Otherwise, he will go home. If he goes to the bank, he will withdraw money only if his balance is above $1000. . If statement If-else statement (answer) (if he had gas he would go, but no gas means don’t go) 4. What would be most appropriate for this situation? Luke wants to play basketball. If it is sunny outside he will go to the park to play basketball. . If statement (answer) If-else statement (doesn’t say what he’s doing when not sunny) Using Python animals = [“lion”, “tiger”, “wildebeest”, “shark”, “jellyfish”, “blobfish”, “raven”] . for i in animals: if i == “shark”: # What boolean value does this statement cause? print(“Fun Fact: The smallest shark is the dwarf lantern shark, and it is small enough to hold in your hand!”) else: print(i) for i in animals: if i == “lion” or “wildebeest” or “raven”: print(“This animal lives in the desert”) . Practice Using only one more if statement, alter the code to print out a statement saying if an animal lives in the desert, based on booleans Write code here beefWellington = { “meat”: True, “prepTime”: 150, “name”: “Beef Wellington” } . cheeseQuesadilla = { “meat”: False, “prepTime”: 10, “name”: “Cheese Quesadilla” . } . chickenAlfredo = { “meat”: True, “prepTime”: 60, “name”: “Chicken Alfredo” } . def cookMeal(dish): if dish[“prepTime”] &lt;= 30: if dish[“meat”] == False: print(“You can cook a”, dish[“name”]) else: print(“Sorry, you do not have meat and cannot cook a”, dish[“name”] ) else: print(“Sorry, you do not have enough time and cannot cook a”, dish[“name”] ) . cookMeal(beefWellington) cookMeal(cheeseQuesadilla) cookMeal(chickenAlfredo) . Exercise 2 Make a flowchart(here is one we used) and write pseudocode for the following scenario. . Mr. Yeung would like to grade live reviews. He wants to see if each student has at least 2 issues on their project. If they don’t they receive a score of 2.0. If they have at least 2 issues, check that they have completed at least 5 of their scrumboard tasks. If they have completed 5 scrumboard tasks, give the student a 2.7. If they have not completed 5 scrumboard tasks, give them a score of 2.5. If they have completed more than 5 tasks, give them a score of 3.0. How much would a student with 3 issues and 1 complete scrumboard task receive? . Answer The person would recieve a 2.0 because they have three issues which is more than 2, but they can’t get more points because they don’t have 5 scrumboard tasks completed. .",
            "url": "https://khalidfarahhh.github.io/project-1/fastpages/markdown/2022/12/07/hwforluke.html",
            "relUrl": "/fastpages/markdown/2022/12/07/hwforluke.html",
            "date": " • Dec 7, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Grading of the student hw",
            "content": "For joselyns group (3.1-2) I received .8/1 because I didnt do a section of the hacks/hw. I was unaware of this section as it was titled hacks and the section following was titled homework hacks so I assumed the hack previously was extra work and not due as homework. For the rest I just put the answer and a breif exlpanation. . For theo’s group (3.3-4) I received a .95/1 because I completed all the questions and had answers as well as a breif explanation. I also had multiple creative word problems I made myself. . For Lukes group I got a .9/1 I did nothing special just completed everything on time and submitted on time. Had good clear work. . For varloo’s group I got a .7 I did everything and had good clean work nothing extra or less was done. . For qais’s group I got a .8. I did everything but i submitted it late . For emma chen group I got a .9 I did everything with explantations and turned it in onlinen . For group 16 I got a .9 I did all the work with explanations . For group 17-18 I got a .9 I did all the work with explanations .",
            "url": "https://khalidfarahhh.github.io/project-1/fastpages/markdown/2022/12/02/grades.html",
            "relUrl": "/fastpages/markdown/2022/12/02/grades.html",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Homework assignment for 3.3-4",
            "content": "Video 1 Hacks . Question 1: All the steps are a sequence–The one that says for i in numbers is a iteration because it goes through the numbers– the if numbers one is selection because it sorts through each number to find the even ones . Question 2: Every step is a sequence–i&lt;=5 is a example of iteration because it repeats until it reaches 5–J&lt;=i is selection because it decides what j is. . Video 2 hacks . Question 1: A=1, B=7, C=3, D=7 . Question 2: Both values are true as hot takes cold’s true value. . Question 3: theo=4 turkey=5 greece=10 cyprus=3 theo=greece greece=turkey theo+greece=????? it equals 15 . Question 4: theo=7 turkey=8 greece=11 cyprus=15 theo=greece greece=turkey theo+greece=????? it equals 19 . Question 5: Value of num1 is 6 and the value of num2 is 11 . 3.4 Video 1 Hacks . Test 1 result would be “SmithB@gmal.com” . Test 2 result would be “ompuook” .",
            "url": "https://khalidfarahhh.github.io/project-1/fastpages/markdown/2022/11/30/theohw.html",
            "relUrl": "/fastpages/markdown/2022/11/30/theohw.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Homework assignment/Hacks 3.1-2",
            "content": "3.1 Variables and Assignment 1 . Question 1 answer: Numapples, integer is the best name because its descriptive of what you are storing . Question 2 answer: isCold, boolean becase its a true or false question . Question 3 answer: Idnumber, string because its descrptive without being too long . Question 4 answer: No because it is too long and not reasoable to use . Question 5 answer: A boolean data type is the best option to store true or false. . Make my own #1: Could how old are you have a boolean type response? Answer=no . Make my own #2: What is the best way to store all of joselyn’s fortnite cards? Answer= FortcardOwned, string . Make my own #3: What is the best way to find jefferys phone #? Answer= phoneNumber, integer . 3.2 Data Abstraction Video 2 . Question 1 answer: The 4th option . Question 2 answer the first option . Question 3 answer the 3rd option . Question 4 answer: the 4 option because it starts counting at 0 . Question 5 answer: All of the above the 4th option because any data can be stored in a list. . Question 6 answer: the 2nd option . Question 7 answer: the 3rd option . Question 8 answer: the 2nd option . Question 9 answer the 6th option . 3.1 Variables and Assingments Video 2 . Question 1 answer: the third option because it is the latest value stored . Question 2 answer: the second option because the value will be always the latest one scored . Question 3 answer: The 4th option . Question 4 answer: the second option because num 1’s value is replaced by num 3’s value . Question 5 answer: the second option because 1 is the variable assigned to p and q’s value is 20 . Question 6 answer: The third option because the first two statements assign values to the variables . Question 7 asnwer: First option .",
            "url": "https://khalidfarahhh.github.io/project-1/fastpages/markdown/2022/11/30/joselynhw1.html",
            "relUrl": "/fastpages/markdown/2022/11/30/joselynhw1.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Night At The Museum",
            "content": "Photos from the night . Here is a photo of james working vigerously before his presentation at night at the museum. Him and his group are preparing their website to show to other students as well. Their project was very interesting and cool. . Here is a drawing by a student in drawing and paintng. It is very detailed and I can tell they spent excessive time completing this. Its awesome to see other students thriving in different aspects of creativity. . Here is another drawing in drawing and painting. The drawing depicts some type of war and theirs many details that show this theme. Its a very good detailing drawing and I like it. . Here is an abundance of kids all working around eachother finishing the last pieces of their projects. The energy was high and you can tell that from the photo as they are excited to show off their work. . Here is an animation from a student in computer animation. Its an awesome photo of legos having a donut party. It shows the creativity in these students and I like the photo alot. It was probably my favorite out of the whole class. . Reflection . I think night at the museum was great and super fun. Id have to say my favorite part of the night would have to be presenting to Mr.Young and showing off our project. It was also cool to see everyone elses projects and how they made creative projects while following the college board guidlines. I think my favorite room that I visited was the drawing and painting room as it was very impressive and some of the drawings there that arent shown on my blog looked so realistic yet animted which amazes me. .",
            "url": "https://khalidfarahhh.github.io/project-1/fastpages/markdown/2022/11/09/NATM.html",
            "relUrl": "/fastpages/markdown/2022/11/09/NATM.html",
            "date": " • Nov 9, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Final Exam Blog",
            "content": "Trimester Reflection . -I feel in this trimester ive had great sucess with this course even tho my grade doesnt reflect it. To me its less about the grade and more about what I learn about coding and my self. This was a huge learning experience as I now know my habits in a course like this and some of the basic coding tools. I know that this upcoming tri I will get an A as I know what the teachers are looking for specifically and what they arent looking for. It was a very fun course to say the least and was a intresting new perspective on how classes could be taught. Project based learning was definitelty a highlight of the course as it was free will to learn without gidelines. I look foward to moving to the second trimester of this course with lots of learning and more effort. . Final Exam Correction . A little confused because it says already a list of of food and dietary restrictions so I this is a unclear question. . Didnt know the answer so searched it up and seems so that google is not efficent as it gave me the wrong answer. . Also searched this up and showed me the exact question with the answer so I find it odd I still got it wrong. . This in my opinion used more logical math and physics then computer science and at the time my state of mind was completly and only computer science. . Followed the errows which I was later educated on that arrows do not mean anything in code so they were deceiving in sending me another way to solve the question. . Questions I searched up . Question #16 Question #17 Question #19 Question #20 Question #25 Question #30 . Strengths and weakness . I think my strengths in this class are definetely more front end stuff and the visual pleasure of the website. I feel its more simple and the work I put in is rewarded better in a sense because of how I can see my work. My weakness would have to be backend and the more complicated coding aspect. I am going to up the work load and diffuculty of my work in the second trimester to improve my knowledge | .",
            "url": "https://khalidfarahhh.github.io/project-1/fastpages/markdown/2022/11/09/FINALtri1.html",
            "relUrl": "/fastpages/markdown/2022/11/09/FINALtri1.html",
            "date": " • Nov 9, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Python Web API Endpoints using Jokes",
            "content": "Model for API . We will begin our journey into APIs by creating and thinking about data. We have learned about Python Lists and dictionaries. In this data example, we are going to make &quot;the best computer jokes ever ;)&quot; and serve them over the Internet. The ultimate objective is to allow our viewers to provide a like or dislike on each of our jokes. . This code planning begins by coming up with some jokes and defining a data &quot;model&quot; to keep and manage the jokes. . jokes_data contains a list of dictionary records containing joke and reactions:haha or boohoo - joke_list contains collection of jokes we will put into jokes_data | . | Next comes some functions to interact with our jokes . def initJokes(): initializes jokes_data | def getJokes(): returns the complete list of jokes | def getJoke(): returns a single joke from our list | ... many more function can be examined by reading comments below ... | . | . import random jokes_data = [] joke_list = [ &quot;If you give someone a program... you will frustrate them for a day; if you teach them how to program... you will &quot; &quot;frustrate them for a lifetime.&quot;, &quot;Q: Why did I divide sin by tan? A: Just cos.&quot;, &quot;UNIX is basically a simple operating system... but you have to be a genius to understand the simplicity.&quot;, &quot;Enter any 11-digit prime number to continue.&quot;, &quot;If at first you don&#39;t succeed; call it version 1.0.&quot;, &quot;Java programmers are some of the most materialistic people I know, very object-oriented&quot;, &quot;The oldest computer can be traced back to Adam and Eve. It was an apple but with extremely limited memory. Just &quot; &quot;1 byte. And then everything crashed.&quot;, &quot;Q: Why did Wi-Fi and the computer get married? A: Because they had a connection&quot;, &quot;Bill Gates teaches a kindergarten class to count to ten. 1, 2, 3, 3.1, 95, 98, ME, 2000, XP, Vista, 7, 8, 10.&quot;, &quot;Q: What’s a aliens favorite computer key? A: the space bar!&quot;, &quot;There are 10 types of people in the world: those who understand binary, and those who don’t.&quot;, &quot;If it wasn&#39;t for C, we’d all be programming in BASI and OBOL.&quot;, &quot;Computers make very fast, very accurate mistakes.&quot;, &quot;Q: Why is it that programmers always confuse Halloween with Christmas? A: Because 31 OCT = 25 DEC.&quot;, &quot;Q: How many programmers does it take to change a light bulb? A: None. It’s a hardware problem.&quot;, &quot;The programmer got stuck in the shower because the instructions on the shampoo bottle said: Lather, Rinse, Repeat.&quot;, &quot;Q: What is the biggest lie in the entire universe? A: I have read and agree to the Terms and Conditions.&quot;, &#39;An SQL statement walks into a bar and sees two tables. It approaches, and asks may I join you?&#39; ] # Initialize jokes def initJokes(): # setup jokes into a dictionary with id, joke, haha, boohoo item_id = 0 for item in joke_list: jokes_data.append({&quot;id&quot;: item_id, &quot;joke&quot;: item, &quot;haha&quot;: 0, &quot;boohoo&quot;: 0}) item_id += 1 # prime some haha responses for i in range(200): id = getRandomJoke()[&#39;id&#39;] addJokeHaHa(id) # prime some haha responses for i in range(50): id = getRandomJoke()[&#39;id&#39;] addJokeBooHoo(id) # Return all jokes from jokes_data def getJokes(): return(jokes_data) # Joke getter def getJoke(id): return(jokes_data[id]) # Return random joke from jokes_data def getRandomJoke(): return(random.choice(jokes_data)) # Liked joke def favoriteJoke(): best = 0 bestID = -1 for joke in getJokes(): if joke[&#39;haha&#39;] &gt; best: best = joke[&#39;haha&#39;] bestID = joke[&#39;id&#39;] return jokes_data[bestID] # Jeered joke def jeeredJoke(): worst = 0 worstID = -1 for joke in getJokes(): if joke[&#39;boohoo&#39;] &gt; worst: worst = joke[&#39;boohoo&#39;] worstID = joke[&#39;id&#39;] return jokes_data[worstID] # Add to haha for requested id def addJokeHaHa(id): jokes_data[id][&#39;haha&#39;] = jokes_data[id][&#39;haha&#39;] + 1 return jokes_data[id][&#39;haha&#39;] # Add to boohoo for requested id def addJokeBooHoo(id): jokes_data[id][&#39;boohoo&#39;] = jokes_data[id][&#39;boohoo&#39;] + 1 return jokes_data[id][&#39;boohoo&#39;] # Pretty Print joke def printJoke(joke): print(joke[&#39;id&#39;], joke[&#39;joke&#39;], &quot; n&quot;, &quot;haha:&quot;, joke[&#39;haha&#39;], &quot; n&quot;, &quot;boohoo:&quot;, joke[&#39;boohoo&#39;], &quot; n&quot;) # Number of jokes def countJokes(): return len(jokes_data) # Test Joke Model if __name__ == &quot;__main__&quot;: initJokes() # initialize jokes # Most likes and most jeered best = favoriteJoke() print(&quot;Most liked&quot;, best[&#39;haha&#39;]) printJoke(best) worst = jeeredJoke() print(&quot;Most jeered&quot;, worst[&#39;boohoo&#39;]) printJoke(worst) # Random joke print(&quot;Random joke&quot;) printJoke(getRandomJoke()) # Count of Jokes print(&quot;Jokes Count: &quot; + str(countJokes())) . Most liked 21 7 Q: Why did Wi-Fi and the computer get married? A: Because they had a connection haha: 21 boohoo: 2 Most jeered 7 16 Q: What is the biggest lie in the entire universe? A: I have read and agree to the Terms and Conditions. haha: 6 boohoo: 7 Random joke 14 Q: How many programmers does it take to change a light bulb? A: None. It’s a hardware problem. haha: 7 boohoo: 3 Jokes Count: 18 . Backend Interface for Web API (Control) . An application programming interface (API) is the medium by which different systems of software interact. In our applications we have two big systems:1. Python Backend that stores data beyond a single Web page2. GH Pages/Fastpages Frontend that is responsible for presenting data . To communicate data between Frontend and Backend, this section Backend code provides and interface to the Frontend using a Web Service Endpoint. Examples of endpoints are listed below and can be typed within a browser, which will return JSON data: . https://flask.nighthawkcodingsociety.com/api/jokes | https://flask.nighthawkcodingsociety.com/api/jokes/2 | https://flask.nighthawkcodingsociety.com/api/jokes/random | . As you can see, these Endpoints return JSON. They are NOT that readable by normal humans. However, they are very effective in passing requested data across the Internet. The Frontend code is responsible for formatting and presenting and interface that allows the typical computer user to interact with this data. . The next cell of code is Creating Endpoints that return JSON. This allows developers in the Frontend to interact with Backend data. API is a contract between the Frontend and Backend on how to share data. . FYI, there is NO output from this section . . from flask import Blueprint, jsonify # jsonify creates an endpoint response object from flask_restful import Api, Resource # used for REST API building import requests # used for testing import random # Blueprints allow this code to be procedurally abstracted from main.py, meaning code is not all in one place app_api = Blueprint(&#39;api&#39;, __name__, url_prefix=&#39;/api/jokes&#39;) # endpoint prefix avoid redundantly typing /api/jokes over and over # API generator https://flask-restful.readthedocs.io/en/latest/api.html#id1 api = Api(app_api) class JokesAPI: # not implemented, this would be where we would allow creation of a new Joke class _Create(Resource): def post(self, joke): pass # getJokes() class _Read(Resource): def get(self): return jsonify(getJokes()) # getJoke(id) class _ReadID(Resource): def get(self, id): return jsonify(getJoke(id)) # getRandomJoke() class _ReadRandom(Resource): def get(self): return jsonify(getRandomJoke()) # getRandomJoke() class _ReadCount(Resource): def get(self): count = countJokes() countMsg = {&#39;count&#39;: count} return jsonify(countMsg) # put method: addJokeHaHa class _UpdateLike(Resource): def put(self, id): addJokeHaHa(id) return jsonify(getJoke(id)) # put method: addJokeBooHoo class _UpdateJeer(Resource): def put(self, id): addJokeBooHoo(id) return jsonify(getJoke(id)) # building RESTapi interfaces, these routes are added to Web Server http://&lt;server&lt;/api/jokes api.add_resource(_Create, &#39;/create/&lt;string:joke&gt;&#39;) api.add_resource(_Read, &#39;/&#39;) # default, which returns all jokes api.add_resource(_ReadID, &#39;/&lt;int:id&gt;&#39;) api.add_resource(_ReadRandom, &#39;/random&#39;) api.add_resource(_ReadCount, &#39;/count&#39;) api.add_resource(_UpdateLike, &#39;/like/&lt;int:id&gt;/&#39;) api.add_resource(_UpdateJeer, &#39;/jeer/&lt;int:id&gt;/&#39;) . Frontend (View Simulation) and Hacks . This python codes tests endpoints on a server. This can be handy for development and testing when making modifications to the Jokes Web APIs. This code works off of the server endpoint/url, not from code cells above it in this notebook. . To work with this code and make observation for learning... . Run a local server from flask_portfolio project and the change server variable to be local | Observe the requests endpoints and the output, see if you can observe what is happening/changing on put requests | The &quot;requests&quot; are captured into a List, the List is used in the for loop to extract from RESTful API format. | Try running this with Debugging and observe what data is being created at each step (Required) | Try to format this data in Python print statements to be more readable (Required) | Start and stop local server and observe errors | . # server = &quot;http://127.0.0.1:5000/&quot; # run local server = &#39;https://flask.nighthawkcodingsociety.com/&#39; # run from web server url = server + &quot;api/jokes/&quot; responses = [] # responses list # Get the count of jokes on server count_response = requests.get(url+&quot;count&quot;) count_json = count_response.json() count = count_json[&#39;count&#39;] # Update likes/dislikes test sequence num = str(random.randint(0, count-1)) # test a random record responses.append( requests.get(url+num) # Get/read joke by id ) responses.append( requests.put(url+&quot;like/&quot;+num) # Put/add to like count ) responses.append( requests.put(url+&quot;jeer/&quot;+num) # Put/add to jeer count ) # Get a random joke responses.append( requests.get(url+&quot;random&quot;) # Get/read a random joke ) # Cycle through and print responses for response in responses: print(response) try: print(response.json()) except: print(&quot;data error&quot;) .",
            "url": "https://khalidfarahhh.github.io/project-1/techtalk/webapi",
            "relUrl": "/techtalk/webapi",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Computer System and Networks",
            "content": "The Internet . College Board . Internet, Word Wide Web, Local Area Network, HTTP, DNS, TCP, UDP, IP. Discussion focuses on Letters and Jig Saw puzzles as analogy for Source, Destination, and Packets. . Web browsers and servers use TCP/IP protocols to connect to the Internet. Common TCP/IP protocols are: . HTTP - Hyper Text Transfer Protocol, HTTPS - Secure HTTP . HTTP takes care of the communication between a web server and the clients web browser. HTTP is used for sending requests from a web client to receive a response from the server. Response could be HTML or JSON. . | HTTPS takes care of secure communication between a web server and a web browser. In our deployment process we used certbot to make HTTP communication secure all the time. . | . | TCP/IP - Transmission Control Protocol, Internet Protocol . TPC/IP messages are broken up into small independent “packets” and sent between computers via the Internet. . | IP is responsible for “routing” each packet to the correct destination. When an IP packet is sent from a computer, it arrives at an IP router. The IP router is responsible for “routing” the packet to the correct destination, directly or via another router. . | . | Network Layer - The wireless and physical layers that move bits and bytes “11010001” across the internet. . | . . Fault Tolerence . College Board . Know how to determine if vertex of graph has more than one connection. Multiple connections, in reference to a computing device, could be considered “Fault Tolerant”. Building “Fault Tolerant” systems makes the network or internet stronger. . Understanding Computer, Routers, Systems, and Purpose are a pre-requisite to understanding Fault Tolerance systems. Regarding College Board videos, for clarification, a Router is typically used to connect computers. Here is an illustration that is very similar to the key components we have used in this class and should be familiar to those who have done deployment. | . As we are at school, using an HTTP client we request a page via LAN or Campus Network. This Network has a router and an ISP router that directs us to the public internet. | DNS is used to translate https://nighthawkcodingsociety.com to an IP address, see What’s My DNS | This targets the Web Server, the request is directed through a router to the Server running Nginx, which intern directs request to Gunicorn application hosting the Flask Website. | . Fault tolerant “routing” and “systems” on the internet is achieved by having redundancy in routing paths and computer functions. Networks and Systems become stronger because of many routes and redundancy of function. This AWS picture shows load balancing, multiple zones, redundant equipment, standby and fail over equipment and paths. This is much more than just having multiple connections, there is A LOT of planning in making fault tolerance. This is why there is such a rise in companies like AWS, Azure, Google Cloud, etc. | . . The path the TCP/IP packet will follow might be different from other packets, for instance from the same HTTP communication. The routers in the network are responsible for the right addressing, depending on traffic volume, errors in the network, etc. Since the Internet is Fault Tolerant, there are many paths to a destination, similar to Google Maps providing alternate paths when we travel. Time can be seen with Ping. Routes and time can be see with TraceRoute command… | . MacBook-Pro-3:~ johnmortensen$ traceroute yahoo.com traceroute: Warning: yahoo.com has multiple addresses; using 74.6.231.20 traceroute to yahoo.com (74.6.231.20), 64 hops max, 52 byte packets 1 osync (192.168.1.1) 3.698 ms 2.227 ms 1.533 ms 2 142-254-184-101.inf.spectrum.com (142.254.184.101) 21.250 ms 16.529 ms 11.286 ms 3 76.167.26.181 (76.167.26.181) 35.013 ms 32.531 ms 45.001 ms 4 agg22.sndhcaax02r.socal.rr.com (72.129.1.142) 19.709 ms 26.443 ms 24.083 ms 5 agg22.tustcaft01r.socal.rr.com (72.129.1.2) 25.561 ms 22.516 ms 31.393 ms 6 bu-ether26.tustca4200w-bcr00.tbone.rr.com (66.109.3.232) 36.292 ms 209-18-43-72.dfw10.tbone.rr.com (209.18.43.72) 29.504 ms 37.647 ms 7 0.ae3.pr1.lax10.tbone.rr.com (107.14.19.56) 29.244 ms 22.536 ms 0.ae2.pr1.lax10.tbone.rr.com (107.14.19.54) 29.889 ms 8 xe-0-0-33-1.par2.lax.yahoo.com (216.115.96.14) 28.815 ms 21.496 ms 25.669 ms 9 unknown.yahoo.com (216.115.102.186) 20.551 ms 23.971 ms 35.320 ms 10 ae-9.pat2.pao.yahoo.com (209.191.64.246) 27.373 ms 27.639 ms 29.064 ms 11 ae-7.pat2.dnx.yahoo.com (209.191.65.9) 59.405 ms 67.980 ms 58.710 ms 12 ae-6.pat1.nez.yahoo.com (209.191.64.226) 74.793 ms ae-5.pat2.nez.yahoo.com (209.191.64.224) 81.188 ms 77.055 ms 13 et-1-0-0.msr2.ne1.yahoo.com (216.115.105.183) 87.602 ms et-1-0-0.msr1.ne1.yahoo.com (216.115.105.29) 78.726 ms et-19-1-0.msr1.ne1.yahoo.com (216.115.105.27) 78.340 ms 14 unknown.yahoo.com (98.138.97.37) 75.661 ms 76.450 ms et-19-1-0.clr1-a-gdc.ne1.yahoo.com (98.138.97.71) 81.867 ms 15 lo0.fab4-2-gdc.ne1.yahoo.com (98.138.51.3) 93.363 ms lo0.fab3-2-gdc.ne1.yahoo.com (98.138.51.2) 96.854 ms lo0.fab4-2-gdc.ne1.yahoo.com (98.138.51.3) 76.542 ms 16 usw2-1-lbd.ne1.yahoo.com (98.138.97.157) 78.076 ms 78.943 ms 75.405 ms 17 media-router-fp73.prod.media.vip.ne1.yahoo.com (74.6.231.20) 81.217 ms 77.895 ms 84.628 ms . Parallel and Distributed Computing . College Board . Single Core versus Multiple Cores allows allows parallel computing. Using multiple Cores allows a sequential job to be split up with minimum time being the length of longest job(s). What is best time for 30 seconds, 50 seconds, 40 seconds jobs on a two core computer? . Distributed Computing - Bitcoin mining is an example of distributed computing. A tough digital computing puzzle illustrates need for CPU/GPU power. A distributed ledger amongst multiple miners is verified to avoid fraud. The result of this distributed computing network is a new financial economy. | . . Parallel Computing - Chrome, the browser most of us use to run our Web Application is a great example of a multi process architecture. There are two primary types of processes in Chrome : the browser process and the render process. . Browser process interacts with information from internet. This has multiple functions: Web contents represents a tab within the browser. Render View manages all IPC (Inter Process Communication), for instance the HTTP actions. . | Render process is responsible for constructing a web page. Webkit is the engine and contains WebCore which constructs DOM (layout) and the JavaScript interpreter. . | . | . .",
            "url": "https://khalidfarahhh.github.io/project-1/5.a/c7.1/c9.3/2022/10/17/AP-computer_systems_networks.html",
            "relUrl": "/5.a/c7.1/c9.3/2022/10/17/AP-computer_systems_networks.html",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Stocks API",
            "content": "from polygon import RESTClient client = RESTClient(&quot;RMq8MchVsVxXpKGlK8QVy5cRer5NWHHd&quot;) # api_key is used aggs = client.get_aggs(&quot;AAPL&quot;, 1, &quot;day&quot;, &quot;2022-04-04&quot;, &quot;2022-04-04&quot;) print(aggs) . [Agg(open=174.57, high=178.49, low=174.44, close=178.44, volume=76545983.0, vwap=177.4855, timestamp=1649044800000, transactions=630374, otc=None)] .",
            "url": "https://khalidfarahhh.github.io/project-1/collegeboard/2022/10/10/stocksapi.html",
            "relUrl": "/collegeboard/2022/10/10/stocksapi.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &#39;x-rapidapi-key&#39;: &quot;dec069b877msh0d9d0827664078cp1a18fajsn2afac35ae063&quot;, &#39;x-rapidapi-host&#39;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } # Request Covid Data response = requests.request(&quot;GET&quot;, url, headers=headers) # print(response.text) # uncomment this line to see raw data # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;jcmbea0fa2ff5msh7f14bf69be38ca6p175482jsn6c4988114560&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . {&#34;message&#34;:&#34;You are not subscribed to this API.&#34;} . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . JSON data is Python type: &lt;class &#39;dict&#39;&gt; Did you insert a valid key in X-RapidAPI-Key of API cell above? {&#39;message&#39;: &#39;You are not subscribed to this API.&#39;} . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference and use APIs within your Project. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI JavaScript frontend API code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | . | Making a Jokes API (this will next API tech talk) Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | . Hacks . Find and use an API as part of your project. An API and a little coding logic will be a big step toward getting meaningful data for a project. There are many API providers, find one that might work for your project to complete this hack. When picking an API you are looking for something that will work with either JavaScript Fetch or Python Request. Here are some samples, these are not qualified in any way. . RapidAPI- GitHub Project | No Key APIs Article | Twitter Developer | Google Developer | Reddit Developer | . Show API and format results in either Web Page or Jupyter Notebook. Ultimately, I will expect that we do APIs in backend (Python/Flask). However, for this Hack you can pick your preference. We will discuss pros and cons in next API tech talk. .",
            "url": "https://khalidfarahhh.github.io/project-1/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Ap Classroom completing questions",
            "content": ".",
            "url": "https://khalidfarahhh.github.io/project-1/fastpages/markdown/2022/10/02/apclassroom.html",
            "relUrl": "/fastpages/markdown/2022/10/02/apclassroom.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "HTML Fragments and Javascript Kernel",
            "content": "function logIt(output) { console.log(output); } logIt(&quot;Hello everyone!&quot;); . Hello everyone! . // define a function to hold data for a Person function Person(name, nationality, age) { this.name = name; this.nationality = nationality; this.age = age; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // defines the manager var manager = new Person(&quot;Fortnite&quot;, &quot;Fortnite&quot;, 70); manager.setRole(&quot;Manager&quot;); // JSON conversion from object to a string Person.prototype.toJSON = function() { const obj = {name: this.name, nationality: this.nationality, age: this.age, role: this.role}; const json = JSON.stringify(obj); return json; } // player data var players = [ new Person(&quot;Ty olsen&quot;, &quot;Mexican&quot;, 16), new Person(&quot;Khalid Farah&quot;, &quot;Palestinian&quot;, 16), new Person(&quot;Jeffery Fonseca&quot;, &quot;African-American&quot;, 17), new Person(&quot;Eli Gilmour&quot;, &quot;Caucasian&quot;, 16), new Person(&quot;Chris Albertson&quot;, &quot;Syrian&quot;, 16), new Person(&quot;Ryan McWeeny&quot;, &quot;Caucasian&quot;, 16), ]; function Squad(Leader, players){ this.manager = Leader; this.squad = [Leader]; this.players = players; this.players.forEach(player =&gt; {player.setRole(&quot;Player&quot;); this.squad.push(player); }); this.json = []; this.squad.forEach(player =&gt; this.json.push(player.toJSON())); } var FUT = new Squad(manager, players); Squad.prototype._toHtml = function() { var style = ( &quot;display:inline-block;&quot; + &quot;background:black;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Nationality&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Age&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Occupation&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of lakers team for (var row of FUT.squad) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.nationality + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.age + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(FUT._toHtml()); . NameNationalityAgeOccupation . Fortnite | Fortnite | 70 | Manager | Ty olsen | Mexican | 16 | Player | Khalid Farah | Palestinian | 16 | Player | Jeffery Fonseca | African-American | 17 | Player | Eli Gilmour | Caucasian | 16 | Player | Chris Albertson | Syrian | 16 | Player | Ryan McWeeny | Caucasian | 16 | Player | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . . .",
            "url": "https://khalidfarahhh.github.io/project-1/collegeboard/2022/09/26/HTMLFrag+JSkernel.html",
            "relUrl": "/collegeboard/2022/09/26/HTMLFrag+JSkernel.html",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "list and dictionaries",
            "content": "InfoDb = [] # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Khalid&quot;, &quot;LastName&quot;: &quot;Farah&quot;, &quot;DOB&quot;: &quot;July 7th 2006&quot;, &quot;Residence&quot;: &quot;San Diego, California&quot;, &quot;Email&quot;: &quot;Khalidfarah211@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;None yet their on the way&quot;], &quot;Pets&quot;: &quot;No pets thankfully&quot;, &quot;Siblings&quot;: &quot;One brother with an age of 21 and a sister who is 19 years old&quot; }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Pets owned:&quot;, d_rec [&quot;Pets&quot;]) print(&quot; t&quot;, &quot;Siblings:&quot;, d_rec [&quot;Siblings&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output Khalid Farah Residence: San Diego, California Birth Day: July 7th 2006 Pets owned: No pets thankfully Siblings: One brother with an age of 21 and a sister who is 19 years old Cars: None yet their on the way .",
            "url": "https://khalidfarahhh.github.io/project-1/collegeboard/2022/09/06/list-and-dictionaries.html",
            "relUrl": "/collegeboard/2022/09/06/list-and-dictionaries.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Bash Tool Check",
            "content": "echo &quot;Using conditional statement to create a project directory and project&quot; # Variable section export project_dir=$HOME/vscode # change vscode to different name to test git clone export project=$project_dir/APCSP # change APCSP to name of project from git clone export project_repo=&quot;https://github.com/nighthawkcoders/APCSP.git&quot; # change to project of choice cd ~ # start in home directory # Conditional block to make a project directory if [ ! -d $project_dir ] then echo &quot;Directory $project_dir does not exists... makinng directory $project_dir&quot; mkdir -p $project_dir fi echo &quot;Directory $project_dir exists.&quot; # Conditional block to git clone a project from project_repo if [ ! -d $project ] then echo &quot;Directory $project does not exists... cloning $project_repo&quot; cd $project_dir git clone $project_repo cd ~ fi echo &quot;Directory $project exists.&quot; . Using conditional statement to create a project directory and project Directory /home/khalidfarah/vscode exists. Directory /home/khalidfarah/vscode/APCSP exists. .",
            "url": "https://khalidfarahhh.github.io/project-1/collegeboard/2022/08/28/bash.html",
            "relUrl": "/collegeboard/2022/08/28/bash.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Football Quiz",
            "content": "def question_and_answer(prompt): print(&quot;Question: &quot; + prompt) msg = input(11) print(&quot;Answer: &quot; + msg) question_and_answer(&quot;How many players are their on defense?&quot;) . Question: How many players are their on defense? Answer: 11 . import pandas as pd data = { &#39;Name&#39;: [&#39;Dillon&#39;, &#39;Noor&#39;, &#39;Steven&#39;, &#39;Lucas&#39;, &#39;Harsha&#39;, &#39;Varalu&#39;, &#39;Ryan&#39;, &#39;Emaad&#39;], &#39;Age&#39;: [24, 31, 42, 27, 29, 26, 90, 15], &#39;Gender&#39;: [&#39;M&#39;, &#39;M&#39;, &#39;M&#39;, &#39;M&#39;, &#39;F&#39;, &#39;F&#39;, &#39;F&#39;, &#39;F&#39;], &#39;Grade&#39;: [&#39;A&#39;, &#39;B&#39;, &#39;A&#39;, &#39;D&#39;, &#39;C&#39;, &#39;F&#39;, &#39;B&#39;, &#39;A&#39;] } df = pd.DataFrame(data) # descriptive statistics of numeric columns print(df.describe()) # counts of unique values in the &#39;Grade&#39; column print(df[&#39;Grade&#39;].value_counts()) # mean age by gender print(df.groupby(&#39;Gender&#39;)[&#39;Age&#39;].mean()) . Age count 8.000000 mean 35.500000 std 23.268618 min 15.000000 25% 25.500000 50% 28.000000 75% 33.750000 max 90.000000 A 3 B 2 D 1 C 1 F 1 Name: Grade, dtype: int64 Gender F 40.0 M 31.0 Name: Age, dtype: float64 .",
            "url": "https://khalidfarahhh.github.io/project-1/collegeboard/2022/08/26/notebookquiz.html",
            "relUrl": "/collegeboard/2022/08/26/notebookquiz.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "First Jupyter Notebook",
            "content": "print(&quot;hello class&quot;) . hello class .",
            "url": "https://khalidfarahhh.github.io/project-1/jupyter/2022/08/22/_08_21_1st_Notebook-(1).html",
            "relUrl": "/jupyter/2022/08/22/_08_21_1st_Notebook-(1).html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Making a quiz on App Lab",
            "content": "Design process . -My plan for the app lab quiz was to create a creative and good looking quiz through code.org. I wanted it to have a colorful theme and use live backgrounds as most of my projects are plain and I assumed not many people would think to use a gif as a background. I knew I wanted to use the kahoot style format to make the questions and have 4 options for each question. I chose to make the math questions easy so I can save time on the work but still demonstrate my understanding of how to show answers are wrong or right. . App Lab Quiz .",
            "url": "https://khalidfarahhh.github.io/project-1/fastpages/markdown/2022/08/21/Markdown.html",
            "relUrl": "/fastpages/markdown/2022/08/21/Markdown.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | | | | | | | | | | | | | | | | | .",
            "url": "https://khalidfarahhh.github.io/project-1/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Jul 7, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Logic Hacks",
            "content": "&lt;!DOCTYPE html&gt; . Click the Circles . Click the Circles . . logic gates . Logic gates can be used to execute basic computer functions by implementing Boolean logic operations on binary inputs, which can be used to perform arithmetic, comparison, and control operations in a computer’s central processing unit (CPU) and other digital circuits. | Boolean operations are abstract mathematical operations defined in Boolean algebra, while logic gates are physical devices or circuits that implement these operations by controlling the flow of electricity through them. Boolean operations are the abstract concepts used to describe logical relationships between variables, while logic gates are the physical components that perform these operations in digital circuits. | I wasnt locked in got 2 wrong | . Binary Logic . . Binary Math . Write the two numbers one above the other, with the second number (the subtrahend) below the first number (the minuend). Starting from the rightmost digit of the subtrahend, subtract each digit from the corresponding digit of the minuend. If the digit in the subtrahend is larger than the digit in the minuend, borrow 1 from the next digit to the left in the minuend. Write the result of each subtraction below the corresponding digits of the subtrahend. If any borrow occurs in step 2, the borrowed digit in the minuend is reduced by 1. This process is repeated until no borrow occurs. Write the result of the subtraction as a binary number. | My fetch code | . Api hacks . . Git hub hacks . Netlify is a hosting service that offers a number of features that set it apart from other hosting services. One major advantage of Netlify is that it provides a simple and intuitive platform for building, deploying, and managing modern web projects. .",
            "url": "https://khalidfarahhh.github.io/project-1/fastpages/markdown/2022/05/02/logichacks.html",
            "relUrl": "/fastpages/markdown/2022/05/02/logichacks.html",
            "date": " • May 2, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "Tinisha hacks",
            "content": "Give an example of iteration. search algorithm finds certain element in a list | What is the difference between a for loop and while loop? That is, when would you use a for loop and when would you use a while loop? use for loop when repeating a certain number of times, and while loop to repeat until condition is met | In the APCSP AP exam, what number do indexes start with? important to know 1 | Are dictionaries and lists mutable? ordered dictioanries are not | . | list Lists are forms of abstraction, used to store large sums of data . | Iteration Iterative statements are also called loops, and they repeat themselves over and over until the condition for stopping is met. . | Describe the difference between a “REPEAT n TIMES” loop VS a “REPEAT UNTIL (condition)” loop. it is important you know this for the AP Exam one repeat a certain amount of times, the other repeats until a condition is met. . | What are some libraries that we’ve learned about? What are their advantages/disadvantages? Numpy, Matlib, Yfinance, these libraries provide data and procedures for the user. . | an unordered collection of key-value pairs, where each key is known and associated with a specific value . | Compare and contrast lists and dictionaries. Lists are numbered based on the index, dictionaries have keys and values Do dictionary keys need to be unique? | yes, otherwise you could not access certain keys | . | List comprehension is similar to iteration in that both involve the process of looping over a sequence of values and performing some operation on each value. CODE . users = [ {‘name’: ‘Ava’, ‘age’: 28, ‘hobby’: ‘reading’}, {‘name’: ‘Ben’, ‘age’: 35, ‘hobby’: ‘painting’}, {‘name’: ‘Charlotte’, ‘age’: 22, ‘hobby’: ‘gaming’}, {‘name’: ‘David’, ‘age’: 45, ‘hobby’: ‘cooking’}, {‘name’: ‘Emily’, ‘age’: 19, ‘hobby’: ‘swimming’}, {‘name’: ‘Frank’, ‘age’: 31, ‘hobby’: ‘gardening’}, {‘name’: ‘Grace’, ‘age’: 26, ‘hobby’: ‘photography’}, {‘name’: ‘Henry’, ‘age’: 40, ‘hobby’: ‘traveling’}, {‘name’: ‘Isaac’, ‘age’: 27, ‘hobby’: ‘music’}, {‘name’: ‘Julia’, ‘age’: 23, ‘hobby’: ‘dancing’}] . | def get_user(name): for user in users: if user[‘name’] == name: print(user) print() . def get_users(): for user in users: print(“Name:”, user[‘name’]) print(“Age:”, user[‘age’]) print(“Hobby:”, user[‘hobby’]) print() . get_user(‘Ben’) get_users() . SIMULATION . simulates population of dudes in 100 years import random | . population = [100] # start with 100 dudes num_years = 10 . for year in range(1, num_years+1): new_dudes = population[year - 1] # get the number of dudes from last year # add some randomness to the new dude production new_dudes *= random.uniform(1.01, 1.03) # assume 1-3% annual growth population.append(round(new_dudes)) # add the new dudes to the list . print(population) .",
            "url": "https://khalidfarahhh.github.io/project-1/fastpages/markdown/2022/05/02/hackslastone.html",
            "relUrl": "/fastpages/markdown/2022/05/02/hackslastone.html",
            "date": " • May 2, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "Extra Credit 3/28",
            "content": "Notes . ” Grades dont define you “ -Ashley explainied how she prospered through failing ap phsyics to majoring it in college. -Ambassadors from cal state san marcos -Computer science is used in every single field. -National leader in social mobility. -Avoid nonpaid internships -lots of variety in clubs at san marcos -apply even if you feel unqualified -ask facalty to read your essays -ten week summer scholar program and get paid 6k for the summer full time -4 week quantum bridge program -scholarships are privately funded -grants are publically funded -lots of scholarships oppurtunites but you have to look for it. -fafsa -avoid getting a loan -unsubsidized loan and unsubsidized . THIS DUDE IS DEBT FREE YO | .",
            "url": "https://khalidfarahhh.github.io/project-1/fastpages/markdown/2022/03/28/extracredit.html",
            "relUrl": "/fastpages/markdown/2022/03/28/extracredit.html",
            "date": " • Mar 28, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "Hacks 3/7/23",
            "content": "Hacks . AP Prep | .",
            "url": "https://khalidfarahhh.github.io/project-1/fastpages/markdown/2022/03/07/Noteshacks.html",
            "relUrl": "/fastpages/markdown/2022/03/07/Noteshacks.html",
            "date": " • Mar 7, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "Rental car project plan",
            "content": "What I will be working on . For me I will be doing the reservation feature that allows you to reserve cars for rental. I will be using a data base for the variety of cars. I will also work on the front end making it look nice implementing photos. I will also have an API to pull the data for the cars and connect it to the database hopefully. This all may be adjusted to meet college board standards. | .",
            "url": "https://khalidfarahhh.github.io/project-1/fastpages/markdown/2022/01/30/projectplan.html",
            "relUrl": "/fastpages/markdown/2022/01/30/projectplan.html",
            "date": " • Jan 30, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "2020 practice exam Corrections",
            "content": "I got a 63/67 . . . . .",
            "url": "https://khalidfarahhh.github.io/project-1/fastpages/markdown/2022/01/30/MCQ2corrections.html",
            "relUrl": "/fastpages/markdown/2022/01/30/MCQ2corrections.html",
            "date": " • Jan 30, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "5:1-5:6 blog",
            "content": "5.1 . Beneficial effects: . Increased efficiency and productivity Improved communication and collaboration Enhanced education and learning opportunities Harmful effects: . Corresponding harmful effects: . Cybersecurity threats and privacy concerns Addiction and decreased physical activity Job displacement and loss of personal touch in communication. . Dopamine issue: Yes dopamine issues are very real. I have experienced it my self scrolling through tik tok and social media for hours. It is a real issue and definetely impact my personal study and success in highschool . 5.2 . Someone empowers themself by using technology to better their own lives, as well as the lives of others and using technology to benefit the world. . Something that someone empowered could do to help someone not empowered at Del Norte is, maybe if the student body really wants a change to happen or an event or theme to happen then ASB could push it through and try to make it happen . Yes an example of one of these barriers is the financial aspect. This goes for all of the world as well because without the recources of technolgoy you cant make urself digitally empowered. . 5.3 . Computer bias I feel like the bias between ages from google to tik tok is purposeful as over time facebook developers realised their audience was older people and started to shift its company towards pleasing that age group As for tik tok it ranges to all ages in my opinion now | Virtual Assistance The voices on these assitants are intentional as a women is seen as more friendly and caring. This is to make the experience more user friendly and nice. It is purposeful and it is not harmful, good business. . | HP computer I think this was not intentional as they just didnt account for this problem too occur. | . I think this happened just because their software wasnt experienced enough and they did run enough tests with people of a darker skin tone. . It should defintely be corrected. . oi bruv . 5.4 . Crowd sourcing A way to initiate crowd sourcing within CSP is to give a website where people can put their own opinions on the class. This will have a variety of opinions and through an average rating out of 10 collected by all inputs we can demonstrate the rate at which students like the class and display this to future csp students. This will let them determine if they wanna take the class or not. | . I dont see how our product could be better with crowd sourcing. . The type of data I could collect is maybe evaluate how many people enter a certain classroom and compare this to another classroom to determinate which subject has a higher interest between students parents. . 5.5 . summary Digital rights are very important, they protect the product of whoever made it and allow your creation to be profitied on. It also helps you so that someone cant steal your work. Patents and copy right claims are used for everything from items to youtube videos to songs. | license Im keeping my apache 2.0 license. It is a permissive license whose main conditions require preservation of copyright and license notices. Contributors provide an express grant of patent rights. Licensed works, modifications, and larger works may be distributed under different terms and without source code. | . 5.6 . PII Ive seen pii in the flask portfolio project in the beginnning we put our information on the website thats personal. | Pii isnt bad as long as the information isnt too perosnal like my number or address. | A good password is something that isnt easy to guess and is different than your other password. A bad one is simple and easy to guess and is similar to your other passwords. Another step could be a secruity question | Symmetric encryption uses a private key to encrypt and decrypt an encrypted email. Asymmetric encryption uses the public key of the recipient to encrypt the message | I dont know of any | I have never fell for a phishing scheme but I have seen it try to happen to me. This is common with social media and people sending links that hack your phone or phone calls with insurance scams or social security scams. | | .",
            "url": "https://khalidfarahhh.github.io/project-1/fastpages/markdown/2022/01/30/5.1-5.2blog.html",
            "relUrl": "/fastpages/markdown/2022/01/30/5.1-5.2blog.html",
            "date": " • Jan 30, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://khalidfarahhh.github.io/project-1/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  
      ,"page0": {
          "title": "Weekly Work",
          "content": "Week Projects . 0 | My First Jupyter Notebook,—&gt; My First Markdown. | . 1 | Football quiz,—&gt; Bash tools check. | . 2 | HTML Frag,—&gt; Java Script kernel. | .",
          "url": "https://khalidfarahhh.github.io/project-1/weeklywork/",
          "relUrl": "/weeklywork/",
          "date": ""
      }
      
  

  

  
      ,"page2": {
          "title": "Analyzing stocks- Mr. Buxton",
          "content": "This website is built and run by Khalid Farah 1. . Assignment . Buxton Intro to Finance 2: Period 1 8/29/2022 . . Analysis 01: Lucid Group . Current Pro Rating: Hold the stock . Current Price: $15.69 . Forecast Price: $50.00 (long term) $12.00 (short term) . News: Lucid Group has decided to start distributing its franchise within the European electric automotive industry, it is developing into a solid competition for other EV companies such as Tesla and startups like Rivian. (Reuters 1/4/22) – . Lucid announces deal for the purchase of up to 100,00 Electric vehicles (Lucid 1) . To enhance the journey experience, Lucid plans to collaborate with Gracenote, an audio technology company that can potentially enhance Lucid’s sound system and its new entertainment system which can be used during long road trips. (Yahoo Finance 1/5/22) . Summary: Lucid is a barely new electric car company with very little credit to its name. They will continue to struggle in the electric car market with competitors like Tesla and other major car manufacturers. Its upside is being highly luxurious while having the same torque as an electric car. . KHALID FARAH &#8617; . |",
          "url": "https://khalidfarahhh.github.io/project-1/About/",
          "relUrl": "/About/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "Front end",
          "content": "",
          "url": "https://khalidfarahhh.github.io/project-1/frontend/",
          "relUrl": "/frontend/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  

  

  

  
  

  
      ,"page16": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://khalidfarahhh.github.io/project-1/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}